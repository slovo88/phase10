{"version":3,"sources":["services/firebase/index.js","services/game/index.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","initializePhase10","userList","ref","once","then","snapshot","index","forEach","childSnapshot","child","set","remove","find","user","uid","val","turnOrder","playersThisRound","length","roundSnapshot","currentRound","newDeck","drawDeck","colors","cardColor","color","push","value","number","cards","i","j","Math","floor","random","_shuffleCards","_generateDeck","indexOfTopCardPostDeal","splice","drawSource","cardsToDraw","drawnCards","card","_drawCard","uidOfFirstPlayerThisRound","initializeRound","App","useState","displayName","setDisplayName","isNewUser","setIsNewUser","isLoading","setIsLoading","gameState","setGameState","isCurrentTurn","setIsCurrentTurn","isHost","setIsHost","userId","setUserId","setUserList","error","setError","retrieveUserInfo","on","updateUserList","childValue","host","findIndex","isUserHost","score","gameScore","currentPhase","hasLaidPhaseThisRound","useEffect","localStorageUserId","localStorage","getItem","id","auth","signInAnonymously","setItem","catch","errorCode","code","errorMessage","message","console","log","onAuthStateChanged","newValue","className","dangerouslySetInnerHTML","__html","for","type","placeholder","onClick","e","preventDefault","nameInputValue","document","getElementById","game","map","key","currentHand","Object","entries","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc91c9e9.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD7owlkcXvzdS8vHY2s3mt_Me-93ma2NZI\",\n  authDomain: \"phase10-pemo.firebaseapp.com\",\n  databaseURL: \"https://phase10-pemo.firebaseio.com\",\n  projectId: \"phase10-pemo\",\n  storageBucket: \"phase10-pemo.appspot.com\",\n  messagingSenderId: \"879568671948\",\n  appId: \"1:879568671948:web:fcf63e12d457b22afade69\",\n  measurementId: \"G-M6NSG0LYQ8\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase","import { firebase } from '../'\n\nconst database = firebase.database()\n\n// initialize game\nfunction initializePhase10(userList) {\n  return database.ref('game/userList').once('value').then(function(snapshot) {\n    let index = 0;\n    snapshot.forEach((childSnapshot) => {\n      index++\n      childSnapshot.child('gameScore').ref.set(0)\n      childSnapshot.child('currentPhase').ref.set(1)\n      childSnapshot.child('hasLaidPhaseThisRound').ref.set(false)\n      childSnapshot.child('currentHand').ref.remove()\n      childSnapshot.child('turnOrder').ref.set(index)\n      childSnapshot.child('isCurrentTurn').ref.set(false)\n      childSnapshot.child('scoreAddedThisRound').ref.set(0)\n\n      userList.find((user) => user.uid === childSnapshot.val().uid).turnOrder = index\n    })\n\n    database.ref('game/currentRound').set(0)\n    \n    initializeRound(userList)\n  })\n}\n\nfunction initializeRound(userList) {\n  const playersThisRound = userList.length\n\n  // advance round\n  database.ref('game/currentRound').once('value', (roundSnapshot) => {\n    let currentRound = roundSnapshot.val()\n    database.ref('game/currentRound').set(currentRound++)\n    \n    // create a new deck\n    const newDeck = _generateDeck()\n    \n    // move what the top card will be after dealing to discard pile\n    const indexOfTopCardPostDeal = playersThisRound * 10\n    database.ref('game/discardPile').set(newDeck.splice(indexOfTopCardPostDeal, 1))\n    \n    // deal cards to players\n    // HACK: more performant than looping and dealing 1 by 1, but also not traditonal deal ¯\\_(ツ)_/¯\n    userList.forEach((user) => {\n      _drawCard(newDeck, user.uid, 10)\n    })\n    \n    database.ref('game/drawpile').set(newDeck)\n    \n    // determine turn order\n    while (currentRound > playersThisRound) {\n      currentRound -= playersThisRound\n    }\n    \n    const uidOfFirstPlayerThisRound = userList.find((user) => user.turnOrder === currentRound).uid;\n    database.ref(`game/userList/${uidOfFirstPlayerThisRound}/isCurrentTurn`).set(true)\n  })\n}\n\nfunction endRound() {\n  database.ref('game/state').set('round-end')\n\n  // loop through players\n    // increase phase if laid down that round\n    // calculate score based on cards left in hand\n      // set to user\n      // add to total score\n      // TODO: stretch, let users see score breakdown/what cards were left in their hands\n    // reset laid down, iscurrentturn\n}\n\n// deck generation\nfunction _generateDeck() {\n  const drawDeck = []\n\n  // create cards:\n  // Values 1-12, 2x each for all four colors\n  // Skips, 4x\n  // Wilds, 8x\n  const colors = ['red', 'yellow', 'green', 'blue']\n\n  for (let cardColor = 0; cardColor < colors.length; cardColor++) {\n    const color = colors[cardColor]\n\n    // creates four skip cards\n    drawDeck.push({ value: 'S', color: 'black' })\n\n    for (let number = 1; number <= 12; number++) {\n      // creates 1-12 of each color, 2x\n      drawDeck.push({ value: number, color })\n      drawDeck.push({ value: number, color })\n\n      // creates two wilds per color\n      if (number === 1 || number === 2) {\n        drawDeck.push({ value: 'W', color: 'black' })\n      }\n    }\n  }\n\n  return _shuffleCards(drawDeck)\n}\n\n// shuffle array of cards\nfunction _shuffleCards(cards) {\n  // Fisher-Yates shuffle - https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n  for (let i = cards.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [cards[i], cards[j]] = [cards[j], cards[i]];\n  }\n  return cards\n}\n\n// draw card to user's hand\nfunction _drawCard(drawSource, uid, cardsToDraw = 1) {\n  // TODO: check that enough cards are available to draw\n\n  // splice appropriate number of items from draw source array\n  const drawnCards = drawSource.splice(0, cardsToDraw)\n\n  // update user's hand\n  drawnCards.forEach((card) => {\n    database.ref(`game/userList/${uid}/currentHand`).push(card)\n  })\n}\n\nexport default { initializePhase10 }","import React, { useState, useEffect } from 'react'\nimport './App.css'\n// import { gameService } from './services'\nimport { firebase, game } from './services'\n\n\nfunction App() {\n  const database = firebase.database()\n  \n  const [ displayName, setDisplayName ] = useState('')\n  const [ isNewUser, setIsNewUser ] = useState(false)\n  const [ isLoading, setIsLoading ] = useState(true)\n  const [ gameState, setGameState ] = useState('pregame')\n  const [ isCurrentTurn, setIsCurrentTurn ] = useState(false)\n  const [ isHost, setIsHost ] = useState(false)\n  const [ userId, setUserId ] = useState(0)\n  const [ userList, setUserList ] = useState([])\n  const [ error, setError ] = useState('')\n\n  useEffect(() => {\n    // determine user's authentication status\n    const localStorageUserId = localStorage.getItem('p10-user-id')\n    let id = localStorageUserId\n    \n    if (localStorageUserId) {\n      setUserId(localStorageUserId)\n      retrieveUserInfo(localStorageUserId)\n    } else {\n      firebase.auth().signInAnonymously()\n        .then(({ user }) => {\n          localStorage.setItem('p10-user-id', user.uid)\n        })\n        .catch((error) => {\n            // Handle Errors here.\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            console.log(errorMessage, errorCode)\n        })\n  \n      firebase.auth().onAuthStateChanged((user) => {\n        if (user) {\n          const { uid } = user\n          setUserId(uid)\n          id = uid\n        }\n      })\n      \n      retrieveUserInfo(userId)\n    }\n\n    // show list of users currently in the game\n    database.ref(`/game/userList`).on('value', (snapshot) => {\n      const userList = []\n      snapshot.forEach((childSnapshot) => {\n        userList.push(childSnapshot.val())\n      })\n      setUserList(userList)\n    });\n\n    // show list of users currently in the game\n    database.ref(`/game/userList`).on('child_changed', (snapshot) => {\n      const newValue = snapshot.val();\n      let userInUserList = userList.find(user => user.uid === newValue.uid);\n      userInUserList = newValue\n\n      if (userInUserList.uid === id) {\n        setIsCurrentTurn(newValue.isCurrentTurn)\n      }\n    });\n\n    // show list of users currently in the game\n    database.ref(`/game/state`).on('value', (snapshot) => {\n      setGameState(snapshot.val())\n    });\n  }, [])\n\n  function retrieveUserInfo(uid) {\n    database.ref(`/users/${uid}/displayName`).on('value', (snapshot) => {\n      const displayName = snapshot.val()\n      if (displayName) {\n        setDisplayName(displayName)\n        setIsLoading(false)\n        updateUserList(uid, displayName)\n      } else {\n        setIsNewUser(true)\n        setIsLoading(false)\n      }\n    });\n    \n  }\n  \n  \n  function updateUserList(uid, displayName) {\n    database.ref(`/game/userList`).once('value', (snapshot) => {\n      const userList = []\n      snapshot.forEach((childSnapshot) => {\n        const childValue = childSnapshot.val()\n        userList.push(childValue)\n\n        // determine if player is host\n        if (childValue.host && uid === childValue.uid) {\n          setIsHost(true)\n        }\n      })\n\n      if (userList.length >= 6) {\n        setError('There are already 6 people in this game.<br>An update is coming soon to allow watching matches.')\n      }  else {\n        const existsInUserList = userList.findIndex((user) => user.uid === uid) !== -1\n        if (!existsInUserList) {\n          const isUserHost = !userList.length\n          database.ref(`/game/userList/`).child(uid).set({ \n            displayName, \n            uid, \n            host: isUserHost,\n            score: 0,\n            gameScore: 0,\n            currentPhase: 1,\n            hasLaidPhaseThisRound: false,\n          })\n        }\n      }\n    })\n  }\n\n  function onDisplayNameSubmit(e) {\n    e.preventDefault()\n    const nameInputValue = document.getElementById('display-name').value\n    database.ref(`/users/${userId}/displayName`).set(nameInputValue)\n    setDisplayName(nameInputValue)\n    updateUserList(userId, nameInputValue)\n    setIsNewUser(false)\n  }\n\n  function startGame(e) {\n    game.initializePhase10(userList).then(() => {\n      database.ref('game/state').set('round')\n    })\n  }\n\n  function removeUser(uid) {\n    database.ref(`game/userList/${uid}`).remove()\n    database.ref(`users/${uid}`).remove()\n  }\n\n  return (\n    <div className={`App ${userId}`}>\n      <style>\n        {`\n        li.${userId} {\n          font-weight: bold;\n          color: seagreen;\n        }\n\n        li.${userId}::after {\n          content: \" (you)\"\n        }\n\n        li.host::after {\n          content: \" (host)\"\n        }\n\n        li.${userId}.host::after {\n          content: \" (you, host)\"\n        }\n        `}\n      </style>\n      <header className=\"App-header\">\n        <h1>Phase 10</h1>\n      </header>\n      <main>\n        {gameState}\n        {isCurrentTurn && <h1>It is your turn</h1>}\n        {error && \n          <p dangerouslySetInnerHTML={{__html: error}} />\n        }\n        {isLoading ?\n          // TODO: make a loading spinner\n          <p>loading...</p>\n          :\n          !isNewUser ?\n            <p>{displayName}</p>\n          :\n          // TODO: componetize the different game states - // pre-game, round, round-end, game-end\n          isNewUser &&\n            <>\n              <h2>Welcome!</h2>\n              <p>Please enter a username to join the game</p>\n              <label for='display-name'>Name:</label>\n              <input \n                id='display-name' \n                type='text' \n                placeholder='Display Name'\n              />\n              <button onClick={onDisplayNameSubmit}>Submit</button>\n            </>\n        }\n        {isHost && !isNewUser && userList.length > 0 &&\n          <button onClick={startGame}>Start Game</button>\n        }\n        <ul>\n          {\n            userList.map((user, index) => (\n              <>\n                <li \n                  className={`${user.uid} ${user.host && 'host'}`} \n                  key={`userList-${index}`}\n                >\n                  {user.displayName}: {user.gameScore}\n                  {isHost && !user.host && \n                    <button \n                      key={`remove-${user.uid}`} \n                      className=\"remove-user\" \n                      onClick={() => removeUser(user.uid)}\n                    >\n                      Remove user\n                    </button>\n                  }\n                </li>\n                {user.currentHand && \n                  Object.entries(user.currentHand).map(card => {\n                    const { value, color } = card[1]\n                    return <span className={`card ${color}`}>{value} </span>\n                  }\n                )}\n              </>\n            \n            ))\n          }\n        </ul>\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// This app requires a connection to firebase, so offline is not an option\nserviceWorker.unregister()\n"],"sourceRoot":""}
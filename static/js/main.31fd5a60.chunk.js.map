{"version":3,"sources":["components/shared/FullScreenModal.js","components/shared/UserList.js","components/game-states/pregame/PreGame.js","components/game-states/round/Card.js","services/firebase/index.js","services/game/index.js","components/game-states/round/DiscardPile.js","components/game-states/round/Hand.js","components/game-states/round/DrawPile.js","constants/phases.js","components/game-states/round/Round.js","components/game-states/round/OtherPlayers.js","components/game-states/round/CompletedPhase.js","components/game-states/round/HitView.js","components/game-states/round-end/RoundEnd.js","App.js","serviceWorker.js","index.js"],"names":["FullScreenModal","closeModal","children","style","position","top","bottom","left","right","backgroundColor","zIndex","overflowY","paddingBottom","height","padding","fontWeight","onClick","UserList","userList","isHost","removeUser","isScoreScreen","isEndScreen","scoreOrder","map","user","sort","a","b","gameScore","className","index","uid","host","key","displayName","scoreAddedThisRound","PreGame","error","isLoading","isNewUser","onDisplayNameSubmit","startGame","dangerouslySetInnerHTML","__html","htmlFor","id","type","placeholder","length","Card","card","color","value","corners","data-card-id","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","_initializeRound","playersThisRound","ref","once","roundSnapshot","currentRound","val","set","newDeck","drawDeck","colors","cardColor","push","number","_shuffleCards","_generateDeck","indexOfTopCardPostDeal","newDiscardPile","splice","forEach","_drawCardsToHand","uidOfFirstPlayerThisRound","find","turnOrder","endRound","snapshot","gameShouldEnd","player","hasLaidPhaseThisRound","currentHand","currentPhase","roundScore","Object","entries","child","remove","entry","cards","i","j","Math","floor","random","drawSource","cardsToDraw","drawnCards","initializePhase10","then","childSnapshot","drawFromPile","pile","deck","discardFromHand","handSize","cardId","frontEndUserList","cardPath","discardedCard","discardPile","unshift","currentPlayer","isCurrentTurn","nextPlayer","followingUser","endTurn","layDownPhase","laidCollections","countOfCardsLaid","reduce","acc","curr","rule","hitOnLaidPhase","isRun","laidId","phaseIndex","wildValue","phaseRefPath","phaseBeingHit","phaseCards","phaseOptions","possiblePlays","options","DiscardPile","setIsDiscardDrawDisabled","useState","topOfDiscard","setTopOfDiscard","useEffect","on","discardPileValue","topCard","off","Hand","DrawPile","drawPileRemaining","setDrawPileRemaining","drawPile","drawPileCard","1","rules","text","2","3","4","5","6","7","8","9","10","game","Round","userId","setIsCurrentTurn","setCurrentPhase","hasDrawnThisTurn","setHasDrawnThisTurn","setHasLaidPhaseThisRound","isDiscardDrawDisabled","selected","setSelected","ruleIndex","setRuleIndex","showModal","toggleModal","modalContent","setModalContent","layHand","setLayHand","itemsToBeLaid","setitemsToBeLaid","discardInModal","handleDrawPileClick","toggleInSelection","selectionIndex","findIndex","selection","selectedCopy","validatePhase","phaseMap","ruleMinimum","console","log","ruleType","firstNonWildIndex","validatedPhase","valueType","firstNumber","numberCheckStart","compareValue","lowestNumber","setValue","setColor","newLayHand","filter","handCard","selectedCard","LayingView","minHeight","DiscardView","openModal","modalStatus","snapshotValue","phaseText","OtherPlayers","thisUser","otherUsers","indexOfFollowingUser","otherUsersInOrder","concat","keys","CompletedPhase","userPhase","setUserPhase","phaseItems","laidRule","lastNumber","HitView","hitStage","setHitStage","laidPhases","setLaidPhases","chosenPhase","setChosenPhase","wildCard","setWildCard","isValidForHit","collectionToValidate","isValid","includes","submitHitRun","hasOnlyOneOption","PickPhase","usersPhases","laidPhase","switchToPickCard","PickCards","submitHitNonRun","PickWildValue","option","RoundEnd","isEndOfGame","App","setDisplayName","setIsNewUser","setIsLoading","gameState","setGameState","setIsHost","setUserId","setUserList","setError","setCurrentHand","retrieveUserInfo","userInfo","updateUserList","childValue","isUserHost","score","localStorageUserId","localStorage","getItem","auth","signInAnonymously","setItem","catch","errorCode","code","errorMessage","message","onAuthStateChanged","newValue","e","preventDefault","nameInputValue","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31fd5a60.chunk.js","sourcesContent":["import React from 'react'\n\nfunction FullScreenModal({ closeModal, children }) {\n    return (\n        <div style={{position: \"fixed\", top:0, bottom:0, left: 0, right: 0, backgroundColor: \"#282c34\",zIndex:10,overflowY:\"scroll\", paddingBottom:\"50px\"}}>\n            <div style={{height: \"20px\", top: 0,}}>\n                <div style={{position: \"absolute\", right:0, padding: \"10px\", fontWeight: \"bold\"}} onClick={closeModal}>X</div>\n            </div>\n            {children}\n        </div>\n    )\n}\n\nexport default FullScreenModal","import React from 'react'\n\nfunction UserList({\n  userList,\n  isHost,\n  removeUser,\n  isScoreScreen = false,\n  isEndScreen = false,\n}) {\n  // deep copy of userList\n  let scoreOrder = userList.map((user) => user)\n\n  if (isScoreScreen) {\n    scoreOrder.sort((a, b) => a.gameScore - b.gameScore)\n  }\n  return (\n    <ol className={isScoreScreen ? 'score-list' : 'users-ingame'}>\n      {\n        scoreOrder.map((user, index) => (\n          <li \n            className={`${user.uid} ${user.host && 'host'}`} \n            key={`userList-${index}`}\n          >\n            <span>{user.displayName}</span>{isScoreScreen ? `: ${user.gameScore}` : ''}{!isEndScreen && isScoreScreen ? ` (+${user.scoreAddedThisRound})` : ''}\n            {isHost && !user.host && !isScoreScreen &&\n              <button \n                key={`remove-${user.uid}`} \n                className=\"remove-user\" \n                onClick={() => removeUser(user.uid)}\n              >\n                Remove user\n              </button>\n            }\n          </li>\n        ))\n      }\n    </ol>\n  )\n}\n\nexport default UserList","import React, { useState, useEffect } from 'react'\n// import { firebase, game } from '../../../services'\nimport { UserList } from '../../shared'\n\n\nfunction PreGame({\n  error,\n  isLoading,\n  isNewUser,\n  displayName,\n  onDisplayNameSubmit,\n  startGame,\n  userList,\n  isHost,\n  removeUser,\n}) {\n  return (\n    <>\n    <header className=\"App-header\">\n      <h1>Phase 10</h1>\n    </header>\n      {error && \n        <p dangerouslySetInnerHTML={{__html: error}} />\n      }\n      {isLoading ?\n        // TODO: make a loading spinner\n        <p>loading...</p>\n        :\n        !isNewUser ?\n          <p>{displayName}</p>\n        :\n        // TODO: componetize the different game states - // pre-game, round, round-end, game-end\n        isNewUser &&\n          <>\n            <h2>Welcome!</h2>\n            <p>Please enter a username to join the game</p>\n            <label htmlFor='display-name'>Name:</label>\n            <input \n              id='display-name' \n              type='text' \n              placeholder='Display Name'\n            />\n            <button onClick={onDisplayNameSubmit}>Submit</button>\n          </>\n      }\n      {isHost && !isNewUser && userList.length > 0 &&\n        <button onClick={startGame}>Everybody's In</button>\n      }\n      <UserList\n        userList={userList}\n        isHost={isHost}\n        removeUser={removeUser}\n      />\n    </>\n    \n  );\n}\n\nexport default PreGame;\n","import React from 'react'\n\nfunction Card({\n  card,\n  onClick,\n}) {\n  const { color, value, corners } = (card[1] || card)\n  \n  return (\n    <div \n      onClick={onClick ? () => onClick(card) : () => {}} \n      data-card-id={card[0]} \n      className={`card ${color}`}\n    >\n      <div className=\"card-value\">\n        {value}\n      </div>\n      <div className=\"card-top-left-value\">\n        {corners}\n      </div>\n      <div className=\"card-bottom-right-value\">\n        {corners}\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD7owlkcXvzdS8vHY2s3mt_Me-93ma2NZI\",\n  authDomain: \"phase10-pemo.firebaseapp.com\",\n  databaseURL: \"https://phase10-pemo.firebaseio.com\",\n  projectId: \"phase10-pemo\",\n  storageBucket: \"phase10-pemo.appspot.com\",\n  messagingSenderId: \"879568671948\",\n  appId: \"1:879568671948:web:fcf63e12d457b22afade69\",\n  measurementId: \"G-M6NSG0LYQ8\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase","import { firebase } from '../'\n\nconst database = firebase.database()\n\n// Pregame gamestate\n\n// initialize game\nfunction initializePhase10(userList) {\n  return database.ref('game/userList').once('value').then(function(snapshot) {\n    let index = 0;\n    snapshot.forEach((childSnapshot) => {\n      index++\n      childSnapshot.child('gameScore').ref.set(0)\n      childSnapshot.child('currentPhase').ref.set(1)\n      childSnapshot.child('hasLaidPhaseThisRound').ref.set(false)\n      childSnapshot.child('currentHand').ref.remove()\n      childSnapshot.child('turnOrder').ref.set(index)\n      childSnapshot.child('isCurrentTurn').ref.set(false)\n      childSnapshot.child('hasDrawnThisTurn').ref.set(false)\n      childSnapshot.child('scoreAddedThisRound').ref.set(0)\n\n      userList.find((user) => user.uid === childSnapshot.val().uid).turnOrder = index\n    })\n\n    database.ref('game/currentRound').set(1)\n    \n    _initializeRound(userList)\n  })\n}\n\nfunction _initializeRound(userList) {\n  const playersThisRound = userList.length\n\n  // advance round\n  database.ref('game/currentRound').once('value', (roundSnapshot) => {\n    let currentRound = roundSnapshot.val()\n\n    database.ref('game/currentRound').set(currentRound + 1)\n    \n    // create a new deck\n    const newDeck = _generateDeck()\n    \n    // move what the top card will be after dealing to discard pile\n    const indexOfTopCardPostDeal = playersThisRound * 10\n    const newDiscardPile = newDeck.splice(indexOfTopCardPostDeal, 1)\n    database.ref('game/discardPile').set(newDiscardPile)\n\n    // if dicard pile is a skip, skip the otherwise first player's turn\n    if (newDiscardPile[0].value === 'Skip') {\n      currentRound++\n    }\n    \n    // deal cards to players\n    // HACK: more performant than looping and dealing 1 by 1, but also not traditonal deal ¯\\_(ツ)_/¯\n    userList.forEach((user) => {\n      _drawCardsToHand(newDeck, user.uid, 10)\n    })\n    \n    database.ref('game/drawPile').set(newDeck)\n\n    // determine turn order\n    while (currentRound > playersThisRound) {\n      currentRound -= playersThisRound\n    }\n    \n    const uidOfFirstPlayerThisRound = userList.find((user) => user.turnOrder === currentRound).uid;\n    database.ref(`game/userList/${uidOfFirstPlayerThisRound}/isCurrentTurn`).set(true)\n  })\n}\n\n// Round gamestate\n\n// Turn\n// start turn -> draw -> play / lay -> discard\n\n// draw from draw or discard pile\nfunction drawFromPile(pile, uid) {\n  // get pile from fb\n  database.ref(`game/${pile}`).once('value', (snapshot) => {\n    let deck = snapshot.val()\n    // _drawCardsToHand to users hand\n    _drawCardsToHand(deck, uid)\n\n    // if draw pile is empty, shuffle discard pile\n    if (deck.length === 0 && pile === 'drawPile') {\n      database.ref('game/discardPile').once('value', (snapshot) => {\n        deck = _shuffleCards(snapshot.val())\n        database.ref(`game/discardPile`).set([])\n      })\n    } \n\n    // set pile in FB\n    database.ref(`game/${pile}`).set(deck)\n\n    // set hasDrawnThisTurn to true\n    database.ref(`game/userList/${uid}/hasDrawnThisTurn`).set(true)\n  })\n}\n\n// lay down phase\nfunction layDownPhase(uid, handSize, laidCollections) {\n  // check handSize for round end\n  const countOfCardsLaid = laidCollections.reduce(((acc, curr) => acc + curr.cards.length), 0)\n\n  // set laid value for user to true\n  database.ref(`game/userList/${uid}/hasLaidPhaseThisRound`).set(true)\n  \n  // remove cards from users hand\n  laidCollections.forEach((rule) => {\n    rule.cards.forEach((card) => {\n      database.ref(`game/userList/${uid}/currentHand/${card[0]}`).remove()\n    })\n  })\n  \n  // add to laidPhases, with userId as the key\n  database.ref(`game/laidPhases/${uid}`).set(laidCollections)\n\n  // if user lays down enough cards to go out, end the round\n  if (countOfCardsLaid === handSize) {\n    endRound()\n  }\n}\n\n// play from hand\nfunction hitOnLaidPhase(uid, handSize, isRun, cards, laidId, phaseIndex, wildValue) {\n  // remove card(s) from user's hand\n  cards.forEach((card) => {\n    database.ref(`game/userList/${uid}/currentHand/${card[0]}`).remove()\n  })\n\n  // check handSize for round end\n  if (handSize === cards.length) {\n    endRound()\n  }\n\n  const phaseRefPath = `game/laidPhases/${laidId}/${phaseIndex}`\n\n  database.ref(phaseRefPath).once('value', (snapshot) => {\n    const phaseBeingHit = snapshot.val()\n    const phaseCards = phaseBeingHit.cards\n    const phaseOptions = phaseBeingHit.possiblePlays.options\n\n    // recalculate options (if it is a run) and add card\n    if (isRun)  {\n      const addedValue = wildValue || cards[0][1].value\n      const isBeingPrepended = addedValue === phaseOptions[0]\n\n      if (isBeingPrepended) {\n        phaseCards.unshift(cards[0])\n        database.ref(`${phaseRefPath}/cards`).set(phaseCards)\n        database.ref(`${phaseRefPath}/possiblePlays/options`).set([phaseOptions[0]-1, phaseOptions[1]])\n      } else {\n        phaseCards.push(cards[0])\n        database.ref(`${phaseRefPath}/cards`).set(phaseCards)\n        database.ref(`${phaseRefPath}/possiblePlays/options`).set([phaseOptions[0], phaseOptions[1]+1])\n      }\n\n    } else {\n      cards.forEach((card) => {\n        phaseCards.push(card)\n        database.ref(`${phaseRefPath}/cards`).set(phaseCards)\n      })\n    }\n  })\n}\n\n// discard from hand\nfunction discardFromHand(uid, handSize, cardId, frontEndUserList) {\n  const cardPath = `game/userList/${uid}/currentHand/${cardId}`\n  \n  database.ref(cardPath).once('value', (snapshot) => {\n    const discardedCard = snapshot.val()\n    \n    // add to discardPile\n    database.ref('game/discardPile').once('value', (snapshot) => {\n      const discardPile = snapshot.val() || []\n\n      discardPile.unshift(discardedCard)\n\n      database.ref('game/discardPile').set(discardPile)\n      \n      // remove from hand\n      database.ref(cardPath).remove()\n      \n      // check handSize for round end\n      if (handSize <= 1) {\n        endRound()\n      } else {\n        // end turn\n        const currentPlayer = frontEndUserList.find((user) => user.isCurrentTurn)\n        const currentPlusOne = frontEndUserList.find((user) => user.turnOrder === currentPlayer.turnOrder + 1)\n        let nextPlayer = currentPlusOne || frontEndUserList.find((user) => user.turnOrder === 1)\n\n        if (discardedCard.value === 'Skip') {\n          const followingUser = frontEndUserList.find((user) => user.turnOrder === nextPlayer.turnOrder + 1)\n          nextPlayer = followingUser || frontEndUserList.find((user) => user.turnOrder === 1)\n        }\n        \n        endTurn(currentPlayer.uid, nextPlayer.uid)\n      }\n    })\n  })\n}\n\n// end turn\nfunction endTurn(currentPlayer, nextPlayer) {\n  // set isCurrentTurn false for current player\n  database.ref(`game/userList/${currentPlayer}/isCurrentTurn`).set(false)\n  // set hasDrawnThisTurn false for current player\n  database.ref(`game/userList/${nextPlayer}/hasDrawnThisTurn`).set(false)\n  \n  // set isCurrentTurn true for next player\n  database.ref(`game/userList/${nextPlayer}/isCurrentTurn`).set(true)\n}\n\n// end the round\nfunction endRound() {\n  // loop through players\n  database.ref(`game/userList`).once('value', (snapshot) => {\n    let gameShouldEnd = false\n\n    snapshot.forEach((player) => {\n      const { gameScore, hasLaidPhaseThisRound, currentHand, currentPhase } = player.val()\n\n      // calculate score based on cards left in hand\n      let roundScore = 0\n\n      if (currentHand) {\n        Object.entries(currentHand).forEach((card) => {\n          if (typeof card[1].value === 'number') {\n            if (card[1].value < 10) {\n              roundScore += 5\n            } else {\n              roundScore += 10\n            }\n          } else if (card[1].value === 'Skip') {\n            roundScore += 15\n          } else {\n            roundScore += 25\n          }\n        })\n      }\n\n      // set to user\n      player.child('scoreAddedThisRound').ref.set(roundScore)\n\n      // add to total score\n      player.child('gameScore').ref.set(gameScore + roundScore)\n\n      // TODO: stretch, let users see score breakdown/what cards were left in their hands\n\n      // increase phase if laid down that round\n      if (hasLaidPhaseThisRound) {\n        if (currentPhase === 10) {\n          gameShouldEnd = true\n        }\n        player.child('currentPhase').ref.set(currentPhase + 1)\n      }\n\n      // reset laid down, iscurrentturn, and drawnThisTurn, and hand\n      player.child('hasLaidPhaseThisRound').ref.set(false)\n      player.child('currentHand').ref.remove()\n      player.child('isCurrentTurn').ref.set(false)\n      player.child('hasDrawnThisTurn').ref.set(false)\n\n    })\n\n    // reset laidPhases\n    database.ref('game/laidPhases').remove()\n    \n    if (gameShouldEnd) {\n      database.ref('game/state').set('game-end')\n    } else {\n      _initializeRound(Object.entries(snapshot.val()).map((entry => entry[1])))\n      database.ref('game/state').set('round-end')\n    }\n  })\n}\n\n// Utility functions\n\n// deck generation\nfunction _generateDeck() {\n  const drawDeck = []\n\n  // create cards:\n  // Values 1-12, 2x each for all four colors\n  // Skips, 4x\n  // Wilds, 8x\n  const colors = ['red', 'yellow', 'green', 'blue']\n\n  for (let cardColor = 0; cardColor < colors.length; cardColor++) {\n    const color = colors[cardColor]\n\n    // creates four skip cards\n    drawDeck.push({ value: 'Skip', color: 'black', corners: 'S' })\n\n    for (let number = 1; number <= 12; number++) {\n      // creates 1-12 of each color, 2x\n      drawDeck.push({ value: number, color, corners: number })\n      drawDeck.push({ value: number, color, corners:number })\n\n      // creates two wilds per color\n      if (number === 1 || number === 2) {\n        drawDeck.push({ value: 'Wild', color: 'black', corners: 'W' })\n      }\n    }\n  }\n\n  return _shuffleCards(drawDeck)\n}\n\n// shuffle array of cards\nfunction _shuffleCards(cards) {\n  // Fisher-Yates shuffle - https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n  for (let i = cards.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [cards[i], cards[j]] = [cards[j], cards[i]];\n  }\n  return cards\n}\n\n// draw card to user's hand\nfunction _drawCardsToHand(drawSource, uid, cardsToDraw = 1) {\n  // splice appropriate number of items from draw source array\n  const drawnCards = drawSource.splice(0, cardsToDraw)\n\n  // update user's hand\n  drawnCards.forEach((card) => {\n    database.ref(`game/userList/${uid}/currentHand`).push(card)\n  })\n}\n\nexport default { initializePhase10, drawFromPile, discardFromHand, layDownPhase, hitOnLaidPhase }","import React, { useState, useEffect } from 'react'\nimport { firebase } from '../../../services'\nimport { Card } from '.'\n\nconst database = firebase.database()\n\n\nfunction DiscardPile({ setIsDiscardDrawDisabled, onClick }) {\n\n  const [ topOfDiscard, setTopOfDiscard ] = useState({ color: null, value: null })\n\n  useEffect(() => {\n    database.ref('game/discardPile').on('value', (snapshot) => {\n      const discardPileValue = snapshot.val()\n      const topCard = discardPileValue ? discardPileValue[0] : { color: 'black', value: 'X', corners: '' }\n  \n      setTopOfDiscard(topCard)\n      \n      if (topCard.value === 'Skip' || !discardPileValue) {\n        setIsDiscardDrawDisabled(true)\n      } else {\n        setIsDiscardDrawDisabled(false)\n      }\n    })\n\n    return function cleanup() {\n      database.ref('game/discardPile').off()\n    }\n  }, [])\n\n  return (\n    <Card \n      onClick={onClick}\n      card={topOfDiscard}\n    />\n  )\n}\n\nexport default DiscardPile","import React from 'react'\nimport { Card } from './'\n\n// possibly sort currentHand\n// arr.sort((a,b) => a.localeCompare(b))\nfunction Hand({ currentHand, onClick }) {\n  return (\n    <div className=\"hand-wrapper\">\n      {currentHand.map((card, index) => {\n        return (\n          <Card \n            card={card}\n            key={`card-${index}-${card[1].value}`}\n            onClick={onClick}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Hand","import React, { useEffect, useState} from 'react'\nimport { Card } from '.'\nimport { firebase } from '../../../services'\n\nfunction DrawPile({ onClick }) {\n  const database = firebase.database()\n\n  const [ drawPileRemaining, setDrawPileRemaining ] = useState(0)\n\n  useEffect(() => {\n    database.ref('game/drawPile').on('value', (snapshot) => {\n      const drawPile = snapshot.val() || []\n  \n      setDrawPileRemaining(drawPile.length)\n    })\n\n    return function cleanup() {\n      database.ref('game/drawPile').off()\n    }\n  }, [])\n\n  const drawPileCard = { color: 'black draw-pile', value: `Draw Pile (${drawPileRemaining})` }\n\n  return (\n    <Card\n      card={drawPileCard}\n      onClick={onClick}\n      className='draw-pile'\n    />\n  )\n}\n\nexport default DrawPile","// Phase 1 – 2 sets of 3\n// Phase 2 – 1 set of 3 and 1 run of 4\n// Phase 3 – 1 set of 4 and 1 run of 4\n// Phase 4 – 1 run of 7\n// Phase 5 – 1 run of 8\n// Phase 6 – 1 run of 9\n// Phase 7 – 2 sets of 4\n// Phase 8 – 7 cards of a color\n// Phase 9 – 1 set of 5 and 1 set of 2\n// Phase 10 – 1 set of 5 and 1 set of 3\n\nexport default {\n  1: {\n    rules: [\n      {\n        type: 'set',\n        number: 3,\n        text: 'first set of 3',\n      },\n      {\n        type: 'set',\n        number: 3,\n        text: 'second set of 3'\n      }\n    ],\n    text: [ '2 sets of 3' ]\n  },\n  2: {\n    rules: [\n      {\n        type: 'set',\n        number: 3,\n        text: 'set of 3',\n      },\n      {\n        type: 'run',\n        number: 4,\n        text: 'run of 4'\n      }\n    ],\n    text: [ '1 set of 3', '1 run of 4' ]\n  },\n  3: {\n    rules: [\n      {\n        type: 'set',\n        number: 4,\n        text: 'set of 4',\n      },\n      {\n        type: 'run',\n        number: 4,\n        text: 'run of 4'\n      }\n    ],\n    text: [ '1 set of 4', '1 run of 4' ]\n  },\n  4: {\n    rules: [\n      {\n        type: 'run',\n        number: 7,\n        text: 'run of 7',\n      },\n    ],\n    text: [ '1 run of 7' ]\n  },\n  5: {\n    rules: [\n      {\n        type: 'run',\n        number: 8,\n        text: 'run of 8',\n      },\n    ],\n    text: [ '1 run of 8' ]\n  },\n  6: {\n    rules: [\n      {\n        type: 'run',\n        number: 9,\n        text: 'run of 9',\n      }\n    ],\n    text: [ '1 run of 9' ]\n  },\n  7: {\n    rules: [\n      {\n        type: 'set',\n        number: 4,\n        text: 'first set of 4',\n      },\n      {\n        type: 'set',\n        number: 4,\n        text: 'second set of 4'\n      }\n    ],\n    text: [ '2 sets of 4' ]\n  },\n  8: {\n    rules: [\n      {\n        type: 'color',\n        number: 7,\n        text: '7 cards of one color',\n      },\n    ],\n    text: [ '7 cards of one color' ]\n  },\n  9: {\n    rules: [\n      {\n        type: 'set',\n        number: 5,\n        text: 'set of 5',\n      },\n      {\n        type: 'set',\n        number: 2,\n        text: 'set of 2'\n      }\n    ],\n    text: [ '1 set of 5', '1 set of 2' ]\n  },\n  10: {\n    rules: [\n      {\n        type: 'set',\n        number: 5,\n        text: 'set of 5',\n      },\n      {\n        type: 'set',\n        number: 3,\n        text: 'set of 3'\n      }\n    ],\n    text: [ '1 set of 5', '1 set of 3' ]\n  },\n}","import React, { useState, useEffect } from 'react'\nimport { DiscardPile,\n  Hand,\n  DrawPile,\n  OtherPlayers,\n  CompletedPhase,\n  HitView,\n} from './'\nimport { game, firebase } from '../../../services'\nimport { FullScreenModal } from '../../shared'\nimport phaseMap from '../../../constants/phases'\n\n//discardFromHand(uid, handSize, cardId, turnOrder)\nconst { drawFromPile, discardFromHand, layDownPhase } = game\nconst database = firebase.database()\n\nfunction Round({\n  currentHand,\n  userId,\n  userList,\n}) {\n\n  const [ isCurrentTurn, setIsCurrentTurn ] = useState(false)\n  const [ currentPhase, setCurrentPhase ] = useState(1)\n  const [ hasDrawnThisTurn, setHasDrawnThisTurn ] = useState(false)\n  const [ hasLaidPhaseThisRound, setHasLaidPhaseThisRound ] = useState(false)\n  const [ isDiscardDrawDisabled, setIsDiscardDrawDisabled ] = useState(false)\n  const [ selected, setSelected ] = useState([])\n  const [ ruleIndex, setRuleIndex ] = useState(0)\n  const [ showModal, toggleModal ] = useState(false)\n  const [ modalContent, setModalContent ] = useState('')\n  const [ layHand, setLayHand ] = useState([])\n  const [ itemsToBeLaid, setitemsToBeLaid ] = useState([])\n\n  // TODO: figure out how to get sorting hand to work - reorder in FB? click and drag? Click to sort?\n  // function sortByValue() {\n  //   var topUserPostsRef = firebase.database().ref('game/' + userId + '/currentHand').orderByChild('color');\n\n  //   topUserPostsRef.once('value', (snapshot) => console.log(snapshot.val))\n  // }\n\n  useEffect(() => {\n    setLayHand(currentHand)\n\n    database.ref(`/game/userList/${userId}/`).on('value', (snapshot) => {\n      const snapshotValue = snapshot.val()\n      setIsCurrentTurn(snapshotValue.isCurrentTurn || false)\n      setHasDrawnThisTurn(snapshotValue.hasDrawnThisTurn || false)\n      setHasLaidPhaseThisRound(snapshotValue.hasLaidPhaseThisRound || false)\n      setCurrentPhase(snapshotValue.currentPhase)\n    })\n\n    return function cleanup() {\n      database.ref(`/game/userList/${userId}/isCurrentTurn`).off()\n    }\n  }, [])\n\n  function discardInModal(card) {\n    discardFromHand(userId, currentHand.length, card[0], userList)\n    closeModal()\n  }\n\n  function handleDrawPileClick(pile) {\n    if (!hasDrawnThisTurn && isCurrentTurn) {\n      drawFromPile(pile, userId)\n    }\n  }\n\n  function toggleInSelection(card) {\n    // -1 if not already selected, index number otherwise\n    const selectionIndex = selected.findIndex((selection) => selection[0] === card[0])\n\n    // need copy to update state with\n    const selectedCopy = selected.map((card) => card)\n\n    // check if card has already been selected\n    if (selectionIndex === -1) {\n      selectedCopy.push(card)\n    } else {\n      selectedCopy.splice(selectionIndex, 1)\n    }\n    \n    // rerender modal\n    setSelected(selectedCopy)\n  }\n\n  function validatePhase() {\n    const { rules } = phaseMap[currentPhase]\n    let error = ''\n    \n    // check for minimum number of cards for rule\n    const ruleMinimum = rules[ruleIndex].number\n    \n    if (selected.length < ruleMinimum) {\n      error = 'Not enough cards selected'\n      console.log(error)\n      return\n    }\n\n    // check if a Skip has been selected\n    const hasSkipSelected = selected.findIndex((card) => card[1].value === \"Skip\") !== -1\n    if (hasSkipSelected) {\n      error = 'Skips cannot be played in phases'\n      console.log(error)\n      return\n    }\n\n    const ruleType = rules[ruleIndex].type\n    const firstNonWildIndex = selected.findIndex((card) => card[1].value !== \"Wild\")\n\n    if (firstNonWildIndex === -1) {\n      // TODO: handle all wilds\n      return\n    }\n\n    const rule = rules[ruleIndex]\n\n    const validatedPhase = {\n      cards: selected,\n      rule,\n      possiblePlays: {\n        valueType: '',\n        options: []\n      }\n    }\n    \n    // run\n    if (ruleType === 'run') {\n      const firstNumber = selected[firstNonWildIndex][1].value\n      let numberCheckStart = firstNumber\n\n      // check if run is valid\n      for (let i = firstNonWildIndex; i < selected.length; i++) {\n        const compareValue = selected[i][1].value\n        if (numberCheckStart !== compareValue && compareValue !== 'Wild') {\n          error = 'These cards to do not make a run or may be out of order'\n          console.log(error)\n          return\n        }\n        numberCheckStart++\n      }\n\n      const lowestNumber = firstNumber - firstNonWildIndex\n      const highestNumber = numberCheckStart - 1\n\n      if (lowestNumber <= 0 || highestNumber >= 13) {\n        error = 'These cards to do not make a run or may be out of order'\n        return\n      }\n\n      validatedPhase.possiblePlays.valueType = 'value'\n      validatedPhase.possiblePlays.options.push(lowestNumber - 1)\n      validatedPhase.possiblePlays.options.push(numberCheckStart)\n    } \n    \n    // set\n    if (ruleType === 'set') {\n      let setValue = selected[firstNonWildIndex][1].value\n\n      // check if run is valid\n      for (let i = firstNonWildIndex; i < selected.length; i++) {\n        const compareValue = selected[i][1].value\n        if (setValue !== compareValue && compareValue !== 'Wild') {\n          error = 'These cards to do not make a run or may be out of order'\n          return\n        }\n      }\n\n      validatedPhase.possiblePlays.valueType = 'value'\n      validatedPhase.possiblePlays.options.push(setValue)\n    }\n    \n    // color\n    if (ruleType === 'color') {\n      let setColor = selected[firstNonWildIndex][1].color\n\n      // check if run is valid\n      for (let i = firstNonWildIndex; i < selected.length; i++) {\n        const { color, value } = selected[i][1]\n        if (setColor !== color && value !== 'Wild') {\n          error = 'These cards to do not make a run or may be out of order'\n          return\n        }\n      }\n\n      validatedPhase.possiblePlays.valueType = 'color'\n      validatedPhase.possiblePlays.options.push(setColor)\n    }\n\n    itemsToBeLaid.push(validatedPhase)\n    \n    if (rules[ruleIndex + 1]) {\n      setRuleIndex(ruleIndex + 1)\n      \n      // filter selected out of lay hand\n      const newLayHand = layHand.filter((handCard) => selected.findIndex((selectedCard) => selectedCard[0] === handCard[0]) === -1)\n\n      setLayHand(newLayHand)\n      // reset selected\n      setSelected([])\n    } else {\n      layDownPhase(userId, currentHand.length, itemsToBeLaid)\n      closeModal()\n    }\n  }\n\n  function LayingView() {\n    const { rules } = phaseMap[currentPhase]\n\n    return (\n      <div>\n        <h1>Select {rules[ruleIndex].text}</h1>\n        {rules[ruleIndex].type === 'run' &&\n          <p>Please choose cards in order</p>\n        }\n        <Hand\n          currentHand={layHand}\n          onClick={toggleInSelection}\n        />\n\n        <p>Selected:</p>\n        <div style={{minHeight:\"84px\"}}>\n          <Hand\n            currentHand={selected}\n            onClick={toggleInSelection}\n          />\n        </div>\n\n        <button onClick={validatePhase}>\n          {ruleIndex === rules.length -1 ?\n            \"Lay down phase\"\n            :\n            \"Next\"\n          }\n        </button>\n      </div>\n    )\n  }\n\n  function DiscardView() {\n    return (\n      <div>\n        <h1>Select card to discard</h1>\n        <Hand\n          currentHand={currentHand}\n          onClick={discardInModal}\n        />\n      </div>\n    )\n  }\n\n  function openModal(modalStatus) {\n    setRuleIndex(0)\n    setSelected([])\n    setitemsToBeLaid([])\n    setModalContent(modalStatus)\n    setLayHand(currentHand)\n    toggleModal(true)\n  }\n\n  function closeModal() {\n    toggleModal(false)\n  }\n\n  return (\n    <div>\n      {showModal && \n        <FullScreenModal\n          closeModal={closeModal}\n        >\n          {modalContent === 'laying' ?\n            <LayingView />\n            :\n            modalContent === 'discarding' ?\n              <DiscardView />\n            :\n            modalContent === 'hitting' &&\n              <HitView \n                userId={userId} \n                currentHand={currentHand}\n                selected={selected}\n                toggleInSelection={toggleInSelection}\n                closeModal={closeModal}\n              />\n          }\n        </FullScreenModal>\n      }\n\n      <OtherPlayers \n        userList={userList}\n        userId={userId}\n      />\n\n      <div className=\"round-middle\">\n        <div className={`card-piles-wrapper ${isCurrentTurn && !hasDrawnThisTurn && 'highlight'}`}>\n          <div className=\"card-piles\">\n            <DrawPile\n              onClick={() => handleDrawPileClick('drawPile')}\n            />\n            <DiscardPile\n              onClick={isDiscardDrawDisabled ? () => {} : () => handleDrawPileClick('discardPile')}\n              setIsDiscardDrawDisabled={setIsDiscardDrawDisabled}\n            />\n          </div>\n        </div>\n        <div className=\"players-phase\">\n          <p>Your phase: {currentPhase}</p>  \n          {/* Move this to a component to share with OtherPlayers.js */}\n          {hasLaidPhaseThisRound ?\n            <CompletedPhase uid={userId} />\n            :\n            phaseMap[currentPhase] && phaseMap[currentPhase].text.map((phaseText) => {\n              return <p key={`${userId}-${phaseText}`} className=\"phase-text\">{phaseText}</p>\n            })\n          }\n          \n        </div>\n      </div>\n      \n      <p className=\"your-hand\">Your hand:</p>\n      <Hand\n        currentHand={currentHand}\n      />\n\n      {isCurrentTurn && hasDrawnThisTurn ? \n          <div>\n            {hasLaidPhaseThisRound ? \n              <button onClick={() => openModal('hitting')}>Hit on laid phase</button>\n              :\n              <button onClick={() => openModal('laying')}>Lay down phase</button>\n            }\n            <button onClick={() => openModal('discarding')}>Discard and end turn</button>\n          </div>\n        :\n        <></>\n      }\n    </div>\n  )\n}\n\nexport default Round;\n","import React from 'react'\nimport phaseMap from '../../../constants/phases'\nimport { CompletedPhase } from './'\n\n\nfunction OtherPlayers({ userList, userId }) {\n  const thisUser = userList.find((user) => user.uid === userId)\n  const otherUsers = userList.filter((user) => user.uid !== userId)\n\n  // ensure users are in numerical turn order\n  otherUsers.sort((a,b) => a.turnOrder - b.turnOrder)\n\n  // splice the array at user after this user\n  const indexOfFollowingUser = otherUsers.findIndex((user) => user.turnOrder > thisUser.turnOrder)\n  const usersAfterThisUser = otherUsers.splice(indexOfFollowingUser)\n  const otherUsersInOrder = usersAfterThisUser.concat(otherUsers)\n\n  return (\n    <div className=\"other-players-wrapper\">\n      {otherUsersInOrder.map((user) => {\n  \n          return (\n            <div key={`other-player-${user.uid}`} className={`turn-indicator ${user.isCurrentTurn && \"highlight\"}`}>\n              <div className=\"other-player\">\n                <p><strong>{user.displayName}</strong></p>\n                <p>Hand: {user.currentHand ? Object.keys(user.currentHand).length : 0}</p>\n                <p>Phase: {user.currentPhase}</p>\n                {user.hasLaidPhaseThisRound ?\n                  <CompletedPhase uid={user.uid} />\n                  :\n                  phaseMap[user.currentPhase] && phaseMap[user.currentPhase].text.map((phaseText) => {\n                    return <p key={`${userId}-${phaseText}`} className=\"phase-text\">{phaseText}</p>\n                  })\n                }\n              </div>\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default OtherPlayers","import React, { useState, useEffect } from 'react'\nimport { firebase } from '../../../services'\n\nconst database = firebase.database()\n\n\nfunction CompletedPhase({ uid }) {\n  const [ userPhase, setUserPhase ] = useState([])\n\n  useEffect(() => {\n    database.ref(`/game/laidPhases/${uid}`).on('value', (snapshot) => {\n      if (snapshot.val()) {\n        const phaseItems = []\n        snapshot.val().forEach((laidRule) => {\n          const { possiblePlays, rule } = laidRule\n          const { type } = rule\n          const { options } = possiblePlays\n          \n          if (type === 'run') {\n            const firstNumber = options[0] + 1\n            const lastNumber = options[1] - 1\n            // send to phaseItems with \"Run: #... #\"\n            phaseItems.push(`Run: ${firstNumber}... ${lastNumber}`)\n          } else {\n            // send to phaseItems with \"${type}: ${color || number}\"\n            phaseItems.push(`Set: ${options[0]}'s`)\n          }\n\n        })\n        setUserPhase(phaseItems)\n      }\n    })\n\n  }, [])\n\n  return userPhase.map((rule) => {\n    return <p key={`${uid}-${rule}`} className=\"laid-phase\">{rule}</p>\n  })\n}\n\nexport default CompletedPhase","import React, { useState, useEffect } from 'react'\nimport { game, firebase } from '../../../services'\nimport { Hand } from './'\n\nconst database = firebase.database()\nconst { hitOnLaidPhase } = game\n\n\nfunction HitView({ userId, currentHand, selected, toggleInSelection, closeModal }) {\n  const [ hitStage, setHitStage ] = useState('pickPhase')\n  const [ laidPhases, setLaidPhases ] = useState([])\n  const [ chosenPhase, setChosenPhase ] = useState({})\n  const [ wildCard, setWildCard ] = useState([])\n\n  useEffect(() => {\n    database.ref('game/laidPhases').once('value', (snapshot) => {\n      setLaidPhases(Object.entries(snapshot.val()))\n    })\n  },[])\n\n  function switchToPickCard(laidId, phaseIndex, isRun, phaseCards, possiblePlays) {\n    setChosenPhase({ laidId, phaseIndex, isRun, phaseCards, possiblePlays })\n    setHitStage('pickCards')\n  }\n\n  function isValidForHit(card) {\n    const collectionToValidate = card ? [ card ] : selected\n    const containsSkip = collectionToValidate.findIndex((card) => card.value === 'Skip') !== -1\n    if (containsSkip) {\n      // const error = 'Skips cannot be used to hit'\n      return false\n    }\n\n    const { possiblePlays } = chosenPhase\n    const { options, valueType } = possiblePlays\n    let isValid = true\n\n    // validate selected\n    collectionToValidate.forEach((selectedCard) => {\n      const compareValue = selectedCard[1][valueType]\n      const isWild = selectedCard[1].value === 'Wild'\n      if (!isWild && !options.includes(compareValue)) {\n        // const error = 'One or more selected cards do not fit the criteria'\n        isValid = false\n      }\n    })\n    return isValid\n  }\n\n  function submitHitRun(card, wildValue) {\n    const { possiblePlays, isRun, phaseIndex, laidId } = chosenPhase\n    const { options } = possiblePlays\n    const hasOnlyOneOption = options.includes(0) || options.includes(13)\n\n    if (card[1].value === 'Wild' && !hasOnlyOneOption && !wildValue ) {\n      setWildCard(card)\n      setHitStage('pickWildValue')\n    } else {\n      if (isValidForHit(card)) {\n        hitOnLaidPhase(userId, currentHand.length, isRun, [card], laidId, phaseIndex, wildValue)\n        setHitStage('pickPhase')\n        closeModal()\n      // function hitOnLaidPhase(uid, handSize, cards, laidId, phaseIndex, wildValue) {\n      }\n    }\n  }\n\n  function submitHitNonRun() {\n    const { isRun, phaseIndex, laidId } = chosenPhase\n\n    // submit selected if valid\n    if (isValidForHit()) {\n      hitOnLaidPhase(userId, currentHand.length, isRun, selected, laidId, phaseIndex)\n      setHitStage('pickPhase')\n      closeModal()\n    }\n  }\n\n  function PickPhase() {\n    return (\n      <>\n        <h1>Choose what to hit&nbsp;on</h1>\n\n        <ul>\n          {laidPhases.map((usersPhases) => usersPhases[1].map((laidPhase, index) => {\n            const { rule, possiblePlays, cards} = laidPhase\n            const { type } = rule\n            const { options } = possiblePlays\n\n            const isRun = type === 'run'\n\n            // only show if there is a possibilty of playing\n            // for instance, a run of 1-12 cannot be played on further\n            if (!(options.includes(0) && options.includes(13))) {\n              return (\n                <li \n                  onClick={() => switchToPickCard(usersPhases[0], index, isRun, cards, possiblePlays)} \n                  key={`hit-${usersPhases[0]}-${index}`}\n                >\n                  <p>\n                    {`${isRun ? 'Run:' : `Set of \"${options[0]}\"s`}`}\n                  </p>\n\n                  <Hand \n                    currentHand={cards}\n                  />\n                </li>\n              )\n            }\n\n            return null\n          }))}\n        </ul>\n      </>\n    )\n  }\n\n  function PickCards() {\n    return (\n      <>\n        <h1>You chose:</h1>\n\n        <Hand\n          currentHand={chosenPhase.phaseCards}\n        />\n\n        <p>\n          {/* TODO: clean up this fucking mess lol */}\n          {/* Basically need to run checks for if a run already has a 1 or 12\n              since it cannot go lower/higher, then structure messaging properly \n          */}\n          {`You can only hit with \n            ${chosenPhase.isRun ? 'a' : ''} \n            \"${chosenPhase.possiblePlays.options[0] !== 0 ? \n            chosenPhase.possiblePlays.options[0] :\n            chosenPhase.possiblePlays.options[1]}\" \n            card${!chosenPhase.isRun ? 's' : \n            chosenPhase.possiblePlays.options[0] !== 0 && chosenPhase.possiblePlays.options[1] !== 13 ? \n            ` or a \"${chosenPhase.possiblePlays.options[1]}\" card` : \n            ''}`\n          }\n        </p>\n        \n        {chosenPhase.isRun &&\n          <p>For a run, you can only hit with one card at a time.</p>\n        }\n\n        <Hand\n          currentHand={currentHand}\n          onClick={chosenPhase.isRun ? submitHitRun : toggleInSelection}\n        />\n\n        {!chosenPhase.isRun && selected.length > 0 &&\n          <>\n            <p>Selected:</p>\n\n            <Hand \n              currentHand={selected}\n              onClick={toggleInSelection}\n            />\n\n            <button onClick={() => submitHitNonRun()}>\n              Hit with selected card{selected.length > 1 && 's'}\n            </button>\n          </>\n        }\n      </>\n    )\n  }\n\n  function PickWildValue() {\n    return (\n      <>\n        <h1>Select a value for your Wild:</h1>\n        {chosenPhase.possiblePlays.options.map((option) => (\n          <button onClick={() => submitHitRun(wildCard, option)} key={`select-wild-${option}`}>\n            {option}\n          </button>\n        ))}\n        <p>Hitting on the following run:</p>\n        <Hand currentHand={chosenPhase.phaseCards} />\n      </>\n    )\n  }\n\n  return (\n    <div className=\"hit-view\">\n      {hitStage === 'pickPhase' ?\n        <PickPhase />\n        :\n        hitStage === 'pickCards' ?\n        <PickCards /> \n        :\n        <PickWildValue />\n      }\n    </div>\n  )\n}\n\nexport default HitView","import React from 'react'\nimport { firebase } from '../../../services'\n\nconst database = firebase.database()\n\n\nfunction RoundEnd({ isHost, children, isEndOfGame }) {\n  function startNextRound() {\n    database.ref('game/state').set('round')\n  }\n\n  function endGame() {\n    database.ref('game/state').set('pregame')\n  }\n\n  return (\n    <>\n      <h1>{isEndOfGame ? 'Game' : 'Round'} over!</h1>\n      <h2>{isEndOfGame ? 'End' : 'Current'} scores:</h2>\n      {children}\n      {isHost &&\n        <button onClick={isEndOfGame ? endGame : startNextRound}>{isEndOfGame ? 'End game' : 'Next round'}</button>\n      }\n    </>\n  )\n}\n\nexport default RoundEnd;\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport { PreGame, Round, RoundEnd } from './components/game-states/'\nimport { firebase, game } from './services'\nimport { UserList } from './components/shared'\n\nconst database = firebase.database()\n\n\nfunction App() {\n  \n  const [ displayName, setDisplayName ] = useState('')\n  const [ isNewUser, setIsNewUser ] = useState(false)\n  const [ isLoading, setIsLoading ] = useState(true)\n  const [ gameState, setGameState ] = useState('')\n  const [ isHost, setIsHost ] = useState(false)\n  const [ userId, setUserId ] = useState(0)\n  const [ userList, setUserList ] = useState([])\n  const [ error, setError ] = useState('')\n  const [ currentHand, setCurrentHand ] = useState([])\n\n  useEffect(() => {\n    // determine user's authentication status\n    const localStorageUserId = localStorage.getItem('p10-user-id')\n    let id = localStorageUserId\n    \n    if (localStorageUserId) {\n      setUserId(localStorageUserId)\n      retrieveUserInfo(localStorageUserId)\n    } else {\n      firebase.auth().signInAnonymously()\n        .then(({ user }) => {\n          localStorage.setItem('p10-user-id', user.uid)\n        })\n        .catch((error) => {\n            // Handle Errors here.\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            console.log(errorMessage, errorCode)\n        })\n  \n      firebase.auth().onAuthStateChanged((user) => {\n        if (user) {\n          const { uid } = user\n          setUserId(uid)\n          id = uid\n        }\n      })\n      \n      retrieveUserInfo(userId)\n    }\n\n    // show list of users currently in the game\n    database.ref(`/game/userList`).on('value', (snapshot) => {\n      const userList = []\n      snapshot.forEach((childSnapshot) => {\n        userList.push(childSnapshot.val())\n      })\n      setUserList(userList)\n    });\n\n    // show list of users currently in the game\n    database.ref(`/game/userList`).on('child_changed', (snapshot) => {\n      const newValue = snapshot.val();\n      let userInUserList = userList.find(user => user.uid === newValue.uid);\n      userInUserList = newValue\n    });\n\n    // show list of users currently in the game\n    database.ref(`/game/state`).on('value', (snapshot) => {\n      setGameState(snapshot.val())\n    });\n\n    database.ref(`/game/userList/${id}/currentHand`).on('value', (snapshot) => {\n      setCurrentHand(Object.entries(snapshot.val() || {}))\n    })\n\n    return function cleanup() {\n      database.ref(`/game/userList/${id}/currentHand`).off()\n      database.ref(`/game/state`).off()\n      database.ref(`/game/userList`).off()\n    }\n  }, [])\n\n  function retrieveUserInfo(uid) {\n    database.ref(`/game/userList/${uid}`).once('value', (snapshot) => {\n      const userInfo = snapshot.val()\n      if (userInfo) {\n        setDisplayName(userInfo.displayName)\n        setIsLoading(false)\n        updateUserList(uid, userInfo.displayName)\n        setCurrentHand(Object.entries(userInfo.currentHand || {}) || [])\n      } else {\n        setIsNewUser(true)\n        setIsLoading(false)\n      }\n    });\n    \n  }\n  \n  \n  function updateUserList(uid, displayName) {    \n    database.ref(`/game/userList`).once('value', (snapshot) => {      \n      const userList = []\n      snapshot.forEach((childSnapshot) => {\n        const childValue = childSnapshot.val()\n        userList.push(childValue)      \n        // determine if player is host\n        if (childValue.host && uid === childValue.uid) {\n          setIsHost(true)\n        }\n      })\n\n      if (userList.length >= 6) {\n        setError('There are already 6 people in this game.')\n      // }  else if () {\n        // TODO: game has started error\n      } else {\n        const existsInUserList = userList.findIndex((user) => user.uid === uid) !== -1\n        if (!existsInUserList) {\n          const isUserHost = !userList.length\n          setIsHost(isUserHost)\n          database.ref(`/game/userList/`).child(uid).set({ \n            displayName, \n            uid, \n            host: isUserHost,\n            score: 0,\n            gameScore: 0,\n            currentPhase: 1,\n            hasLaidPhaseThisRound: false,\n          })\n        }\n      }\n    })\n  }\n\n  function onDisplayNameSubmit(e) {\n    e.preventDefault()\n    const nameInputValue = document.getElementById('display-name').value\n    database.ref(`/users/${userId}/displayName`).set(nameInputValue)\n    setDisplayName(nameInputValue)    \n    updateUserList(userId, nameInputValue)\n    setIsNewUser(false)\n  }\n\n  function startGame() {\n    game.initializePhase10(userList).then(() => {\n      database.ref('game/state').set('round')\n    })\n  }\n\n  function removeUser(uid) {\n    database.ref(`game/userList/${uid}`).remove()\n    database.ref(`users/${uid}`).remove()\n  }\n\n  return (\n    <div className={`App ${userId}`}>\n      <style>\n        {`\n        li.${userId} {\n          font-weight: bold;\n          color: seagreen;\n        }\n\n        .users-ingame li.${userId}::after {\n          content: \" (you)\";\n        }\n\n        .users-ingame li.host::after {\n          content: \" (host)\";\n        }\n\n        .users-ingame li.${userId}.host::after {\n          content: \" (you, host)\";\n        }\n        `}\n      </style>\n      <main>\n        {isLoading ?\n          // TODO: make a loading spinner\n          <p>loading...</p>\n          :\n          gameState === 'pregame' || isNewUser ? // TODO: figure out better way to handle user entering game after it has started\n            <PreGame\n            error={error}\n            isNewUser={isNewUser}\n            onDisplayNameSubmit={onDisplayNameSubmit}\n            isHost={isHost}\n            userList={userList}\n            startGame={startGame}\n            removeUser={removeUser}\n            />\n            :\n            gameState === 'round' ?\n              <Round \n              currentHand={currentHand}\n              userList={userList}\n              userId={userId}\n              />\n              :\n              gameState === 'round-end' || gameState === 'game-end' ?\n                <RoundEnd \n                  isHost={isHost} \n                  isEndOfGame={gameState === 'game-end'}\n                >\n                  <UserList\n                    userList={userList}\n                    isHost={isHost}\n                    removeUser={() => {}}\n                    isScoreScreen={true}\n                  />\n                </RoundEnd>\n                :\n                <p>Loading...</p>\n        } \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// This app requires a connection to firebase, so offline is not an option\nserviceWorker.unregister()\n"],"sourceRoot":""}
{"version":3,"sources":["components/game-states/pregame/UserList.js","components/game-states/pregame/PreGame.js","components/game-states/round/Card.js","services/firebase/index.js","services/game/index.js","components/game-states/round/DiscardPile.js","components/game-states/round/Hand.js","components/game-states/round/DrawPile.js","components/shared/FullScreenModal.js","components/game-states/round/Round.js","App.js","serviceWorker.js","index.js"],"names":["UserList","userList","isHost","removeUser","map","user","index","className","uid","host","key","displayName","onClick","PreGame","error","isLoading","isNewUser","onDisplayNameSubmit","startGame","dangerouslySetInnerHTML","__html","htmlFor","id","type","placeholder","length","Card","card","color","value","data-card-id","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","_drawCardsToHand","drawSource","cardsToDraw","drawnCards","splice","forEach","ref","push","initializePhase10","once","then","snapshot","childSnapshot","child","set","remove","find","val","turnOrder","playersThisRound","roundSnapshot","currentRound","newDeck","drawDeck","colors","cardColor","number","cards","i","j","Math","floor","random","_shuffleCards","_generateDeck","indexOfTopCardPostDeal","uidOfFirstPlayerThisRound","initializeRound","drawFromPile","pile","deck","console","log","discardFromHand","handSize","cardId","frontEndUserList","cardPath","discardedCard","discardPile","currentPlayer","isCurrentTurn","nextPlayer","endTurn","DiscardPile","isTopOfDiscardSkip","setIsTopOfDiscardSkip","useState","topOfDiscard","setTopOfDiscard","useEffect","on","topCard","off","Hand","children","DrawPile","drawPileRemaining","setDrawPileRemaining","drawPile","drawPileCard","FullScreenModal","toggleModal","style","position","top","bottom","left","right","backgroundColor","height","padding","game","Round","currentHand","userId","setIsCurrentTurn","hasDrawnThisTurn","setHasDrawnThisTurn","hasLaidPhaseThisRound","setHasLaidPhaseThisRound","showModal","modalContent","setModalContent","doTheThing","e","target","getAttribute","snapshotValue","numberOfCardsInHand","App","setDisplayName","setIsNewUser","setIsLoading","gameState","setGameState","setIsHost","setUserId","setUserList","setError","setCurrentHand","retrieveUserInfo","userInfo","updateUserList","Object","entries","childValue","findIndex","isUserHost","score","gameScore","currentPhase","localStorageUserId","localStorage","getItem","auth","signInAnonymously","setItem","catch","errorCode","code","errorMessage","message","onAuthStateChanged","newValue","preventDefault","nameInputValue","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c4372c5.chunk.js","sourcesContent":["import React from 'react'\n\nfunction UserList({\n  userList,\n  isHost,\n  removeUser,\n}) {\n\n  return (\n    <ul>\n      {\n        userList.map((user, index) => (\n          <li \n            className={`${user.uid} ${user.host && 'host'}`} \n            key={`userList-${index}`}\n          >\n            {user.displayName}\n            {isHost && !user.host && \n              <button \n                key={`remove-${user.uid}`} \n                className=\"remove-user\" \n                onClick={() => removeUser(user.uid)}\n                key={`remove-${user.uid}`}\n              >\n                Remove user\n              </button>\n            }\n          </li>\n        ))\n      }\n    </ul>\n  )\n}\n\nexport default UserList","import React, { useState, useEffect } from 'react'\n// import { firebase, game } from '../../../services'\nimport { UserList } from './'\n\n\nfunction PreGame({\n  error,\n  isLoading,\n  isNewUser,\n  displayName,\n  onDisplayNameSubmit,\n  startGame,\n  userList,\n  isHost,\n  removeUser,\n}) {\n  return (\n    <>\n      {error && \n        <p dangerouslySetInnerHTML={{__html: error}} />\n      }\n      {isLoading ?\n        // TODO: make a loading spinner\n        <p>loading...</p>\n        :\n        !isNewUser ?\n          <p>{displayName}</p>\n        :\n        // TODO: componetize the different game states - // pre-game, round, round-end, game-end\n        isNewUser &&\n          <>\n            <h2>Welcome!</h2>\n            <p>Please enter a username to join the game</p>\n            <label htmlFor='display-name'>Name:</label>\n            <input \n              id='display-name' \n              type='text' \n              placeholder='Display Name'\n            />\n            <button onClick={onDisplayNameSubmit}>Submit</button>\n          </>\n      }\n      {isHost && !isNewUser && userList.length > 0 &&\n        <button onClick={startGame}>Start Game</button>\n      }\n      <UserList\n        userList={userList}\n        isHost={isHost}\n        removeUser={removeUser}\n      />\n    </>\n    \n  );\n}\n\nexport default PreGame;\n","import React from 'react'\n\nfunction Card({\n  card,\n  onClick,\n}) {\n  const { color, value } = (card[1] || card)\n  \n  return <div onClick={onClick} data-card-id={card[0]} className={`card ${color}`}>{value}</div>\n}\n\nexport default Card","import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD7owlkcXvzdS8vHY2s3mt_Me-93ma2NZI\",\n  authDomain: \"phase10-pemo.firebaseapp.com\",\n  databaseURL: \"https://phase10-pemo.firebaseio.com\",\n  projectId: \"phase10-pemo\",\n  storageBucket: \"phase10-pemo.appspot.com\",\n  messagingSenderId: \"879568671948\",\n  appId: \"1:879568671948:web:fcf63e12d457b22afade69\",\n  measurementId: \"G-M6NSG0LYQ8\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase","import { firebase } from '../'\n\nconst database = firebase.database()\n\n// Pregame gamestate\n\n// initialize game\nfunction initializePhase10(userList) {\n  return database.ref('game/userList').once('value').then(function(snapshot) {\n    let index = 0;\n    snapshot.forEach((childSnapshot) => {\n      index++\n      childSnapshot.child('gameScore').ref.set(0)\n      childSnapshot.child('currentPhase').ref.set(1)\n      childSnapshot.child('hasLaidPhaseThisRound').ref.set(false)\n      childSnapshot.child('currentHand').ref.remove()\n      childSnapshot.child('turnOrder').ref.set(index)\n      childSnapshot.child('isCurrentTurn').ref.set(false)\n      childSnapshot.child('hasDrawnThisTurn').ref.set(false)\n      childSnapshot.child('scoreAddedThisRound').ref.set(0)\n\n      userList.find((user) => user.uid === childSnapshot.val().uid).turnOrder = index\n    })\n\n    database.ref('game/currentRound').set(0)\n    \n    initializeRound(userList)\n  })\n}\n\nfunction initializeRound(userList) {\n  const playersThisRound = userList.length\n\n  // advance round\n  database.ref('game/currentRound').once('value', (roundSnapshot) => {\n    let currentRound = roundSnapshot.val()\n    database.ref('game/currentRound').set(currentRound++)\n    \n    // create a new deck\n    const newDeck = _generateDeck()\n    \n    // move what the top card will be after dealing to discard pile\n    const indexOfTopCardPostDeal = playersThisRound * 10\n    database.ref('game/discardPile').set(newDeck.splice(indexOfTopCardPostDeal, 1))\n    \n    // deal cards to players\n    // HACK: more performant than looping and dealing 1 by 1, but also not traditonal deal ¯\\_(ツ)_/¯\n    userList.forEach((user) => {\n      _drawCardsToHand(newDeck, user.uid, 10)\n    })\n    \n    database.ref('game/drawPile').set(newDeck)\n    \n    // determine turn order\n    while (currentRound > playersThisRound) {\n      currentRound -= playersThisRound\n    }\n    \n    const uidOfFirstPlayerThisRound = userList.find((user) => user.turnOrder === currentRound).uid;\n    database.ref(`game/userList/${uidOfFirstPlayerThisRound}/isCurrentTurn`).set(true)\n  })\n}\n\n// Round gamestate\n\n// Turn\n// start turn -> draw -> play / lay -> discard\n\n// draw from draw or discard pile\nfunction drawFromPile(pile, uid) {\n  // get pile from fb\n  database.ref(`game/${pile}`).once('value', (snapshot) => {\n    const deck = snapshot.val()\n    console.log({deck})\n    // _drawCardsToHand to users hand\n    _drawCardsToHand(deck, uid)\n    console.log({deck})\n    // set pile in FB\n    database.ref(`game/${pile}`).set(deck)\n    // set hasDrawnThisTurn to true\n    database.ref(`game/userList/${uid}/hasDrawnThisTurn`).set(true)\n  })\n}\n\n// lay down phase\nfunction layDownPhase(uid, handSize, cardsForPhase1, cardsForPhase2) {\n  // TODO: validations to happen in component? or here?\n  // determine cards that can be played on each phase and group in objects\n  // push to new laidIds\n  // set laid value for user to true\n  // check handSize for round end\n    // endRound\n}\n\n// play from hand\nfunction playFromHand(uid, handSize, cardId, laidId) {\n  // TODO: validations to happen in component? or here?\n  // add to laidId\n  // remove from hand\n  // check handSize for round end\n    // endRound\n}\n\n// discard from hand\nfunction discardFromHand(uid, handSize, cardId, frontEndUserList) {\n  console.log(uid, handSize, cardId, frontEndUserList);\n  const cardPath = `game/userList/${uid}/currentHand/${cardId}`\n  \n  database.ref(cardPath).once('value', (snapshot) => {\n    const discardedCard = snapshot.val()\n    \n    // add to discardPile\n    database.ref('game/discardPile').once('value', (snapshot) => {\n      const discardPile = snapshot.val() || []\n\n      discardPile.push(discardedCard)\n\n      database.ref('game/discardPile').set(discardPile)\n      \n    })\n  })\n\n  // remove from hand\n  database.ref(cardPath).remove()\n\n  // check handSize for round end\n  if (handSize <= 1) {\n    endRound()\n  } else {\n    // end turn\n    const currentPlayer = frontEndUserList.find((user) => user.isCurrentTurn)\n    const currentPlusOne = frontEndUserList.find((user) => user.turnOrder === currentPlayer.turnOrder + 1)\n    const nextPlayer = currentPlusOne || frontEndUserList.find((user) => user.turnOrder === 1)\n\n    endTurn(currentPlayer.uid, nextPlayer.uid)\n  }\n}\n\n// end turn\nfunction endTurn(currentPlayer, nextPlayer) {\n  // set isCurrentTurn false for current player\n  database.ref(`game/userList/${currentPlayer}/isCurrentTurn`).set(false)\n  // set hasDrawnThisTurn false for current player\n  database.ref(`game/userList/${nextPlayer}/hasDrawnThisTurn`).set(false)\n  \n  // set isCurrentTurn true for next player\n  database.ref(`game/userList/${nextPlayer}/isCurrentTurn`).set(true)\n}\n\n// end the round\nfunction endRound() {\n  database.ref('game/state').set('round-end')\n\n  // loop through players\n  // calculate score based on cards left in hand\n  // set to user\n  // add to total score\n  // TODO: stretch, let users see score breakdown/what cards were left in their hands\n  // reset laid down, iscurrentturn, and drawnThisTurn\n  // increase phase if laid down that round\n    // if someone completed phase 10, endGame\n}\n\n// Round-end gamestate\n\n// check for game end\nfunction checkForGameEnd() {\n  // if someone completed phase 10, endGame\n  // else init round\n}\n\n// Game-end gamestate\n// don't think there is any specific functions here, but can re-init game\n\n// Utility functions\n\n// deck generation\nfunction _generateDeck() {\n  const drawDeck = []\n\n  // create cards:\n  // Values 1-12, 2x each for all four colors\n  // Skips, 4x\n  // Wilds, 8x\n  const colors = ['red', 'yellow', 'green', 'blue']\n\n  for (let cardColor = 0; cardColor < colors.length; cardColor++) {\n    const color = colors[cardColor]\n\n    // creates four skip cards\n    drawDeck.push({ value: 'S', color: 'black' })\n\n    for (let number = 1; number <= 12; number++) {\n      // creates 1-12 of each color, 2x\n      drawDeck.push({ value: number, color })\n      drawDeck.push({ value: number, color })\n\n      // creates two wilds per color\n      if (number === 1 || number === 2) {\n        drawDeck.push({ value: 'W', color: 'black' })\n      }\n    }\n  }\n\n  return _shuffleCards(drawDeck)\n}\n\n// shuffle array of cards\nfunction _shuffleCards(cards) {\n  // Fisher-Yates shuffle - https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n  for (let i = cards.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [cards[i], cards[j]] = [cards[j], cards[i]];\n  }\n  return cards\n}\n\n// draw card to user's hand\nfunction _drawCardsToHand(drawSource, uid, cardsToDraw = 1) {\n  // TODO: check that enough cards are available to draw\n\n  // splice appropriate number of items from draw source array\n  const drawnCards = drawSource.splice(0, cardsToDraw)\n\n  // update user's hand\n  drawnCards.forEach((card) => {\n    database.ref(`game/userList/${uid}/currentHand`).push(card)\n  })\n}\n\nexport default { initializePhase10, drawFromPile, discardFromHand }","import React, { useState, useEffect } from 'react'\nimport { firebase } from '../../../services'\nimport { Card } from '.'\n\n\nfunction DiscardPile({ isTopOfDiscardSkip, setIsTopOfDiscardSkip }) {\n  const database = firebase.database()\n\n  const [ topOfDiscard, setTopOfDiscard ] = useState({ color: null, value: null })\n\n  useEffect(() => {\n    database.ref('game/discardPile').on('value', (snapshot) => {\n      const topCard = snapshot.val() ? snapshot.val()[snapshot.val().length - 1] : { color: 'black', value: 'empty' }\n  \n      setTopOfDiscard(topCard)\n\n      console.log(topCard)\n\n      if (topCard.value === 'S') {\n        setIsTopOfDiscardSkip(true)\n      } else if (isTopOfDiscardSkip) {\n        setIsTopOfDiscardSkip(false)\n      }\n    })\n\n    return function cleanup() {\n      database.ref('game/discardPile').off()\n    }\n  }, [])\n\n  return (\n    <Card \n      card={topOfDiscard}\n    />\n  )\n}\n\nexport default DiscardPile","import React from 'react'\n\nfunction Hand({ children }) {\n  return (\n    <div>\n      {children}\n    </div>\n  )\n}\n\nexport default Hand","import React, { useEffect, useState} from 'react'\nimport { Card } from '.'\nimport { firebase } from '../../../services'\n\nfunction DrawPile() {\n  const database = firebase.database()\n\n  const [ drawPileRemaining, setDrawPileRemaining ] = useState(0)\n\n  useEffect(() => {\n    database.ref('game/drawPile').on('value', (snapshot) => {\n      const drawPile = snapshot.val() || []\n  \n      setDrawPileRemaining(drawPile.length)\n    })\n\n    return function cleanup() {\n      database.ref('game/drawPile').off()\n    }\n  }, [])\n\n  const drawPileCard = { color: 'black draw-pile', value: drawPileRemaining }\n\n  return (\n    <Card\n      card={drawPileCard}\n      className='draw-pile'\n    />\n  )\n}\n\nexport default DrawPile","import React from 'react'\n\nfunction FullScreenModal({ toggleModal, children }) {\n    return (\n        <div style={{position: \"fixed\", top:0, bottom:0, left: 0, right: 0, backgroundColor: \"orange\",}}>\n            <div style={{height: \"50px\", top: 0,}}>\n                <div style={{position: \"absolute\", right:10, padding: \"15px\"}} onClick={() => toggleModal(false)}>X</div>\n            </div>\n            {children}\n        </div>\n    )\n}\n\nexport default FullScreenModal","import React, { useState, useEffect } from 'react'\nimport { DiscardPile, Card, Hand, DrawPile } from './'\nimport { game, firebase } from '../../../services'\nimport { FullScreenModal } from '../../shared'\n\n//discardFromHand(uid, handSize, cardId, turnOrder)\nconst { drawFromPile, discardFromHand } = game\nconst database = firebase.database()\n\nfunction Round({\n  currentHand,\n  userId,\n  userList,\n}) {\n\n  const [ isCurrentTurn, setIsCurrentTurn ] = useState(false)\n  const [ hasDrawnThisTurn, setHasDrawnThisTurn ] = useState(false)\n  const [ hasLaidPhaseThisRound, setHasLaidPhaseThisRound ] = useState(false)\n  const [ isTopOfDiscardSkip, setIsTopOfDiscardSkip ] = useState(false)\n  const [ showModal, toggleModal ] = useState(false)\n  const [ modalContent, setModalContent ] = useState(<div>Something went wrong, reach out to Pemo</div>)\n\n  // TODO: figure out how to get sorting hand to work - reorder in FB? click and drag?\n  // function sortByValue() {\n  //   var topUserPostsRef = firebase.database().ref('game/' + userId + '/currentHand').orderByChild('color');\n\n  //   topUserPostsRef.once('value', (snapshot) => console.log(snapshot.val))\n  // }\n\n  useEffect(() => {\n    database.ref(`/game/userList/${userId}/`).on('value', (snapshot) => {\n      const snapshotValue = snapshot.val()\n        setIsCurrentTurn(snapshotValue.isCurrentTurn || false)\n        setHasDrawnThisTurn(snapshotValue.hasDrawnThisTurn || false)\n        setHasLaidPhaseThisRound(snapshotValue.hasLaidPhaseThisRound || false)\n    })\n\n    return function cleanup() {\n      database.ref(`/game/userList/${userId}/isCurrentTurn`).off()\n    }\n  }, [])\n\n  function doTheThing(e) {\n    const cardId = e.target.getAttribute('data-card-id')\n    discardFromHand(userId, currentHand.length, cardId, userList)\n    toggleModal(false)\n  }\n\n\n  function prepForDiscard() {\n    const numberOfCardsInHand = currentHand.length\n    if (numberOfCardsInHand > 1) {\n      setModalContent(\n        <div>\n          <h1>Select card to discard</h1>\n          <Hand>\n            {currentHand && \n              currentHand.map((card, index) => {\n                return (\n                  <Card \n                    card={card}\n                    key={`card-${index}-${card[1].value}`}\n                    onClick={doTheThing}\n                  />\n                )\n              }\n            )}\n          </Hand>\n        </div>\n      )\n      toggleModal(true)\n    } else {\n      discardFromHand(userId, numberOfCardsInHand, currentHand[0], userList)\n    }\n  }\n\n  return (\n    <div>\n      {showModal && \n        <FullScreenModal \n          toggleModal={toggleModal}\n        >\n          {modalContent}\n        </FullScreenModal>\n      }\n      {/* TODO: Show other player's name, phase, laid down cards, and hand size */}\n      {/* <OtherPlayers /> */}\n      <DrawPile />\n      <DiscardPile \n        isTopOfDiscardSkip={isTopOfDiscardSkip}\n        setIsTopOfDiscardSkip={setIsTopOfDiscardSkip}\n      />\n\n      <Hand>\n        {/* move to Hand.js */}\n        {currentHand && \n          currentHand.map((card, index) => {\n            return (\n              <Card \n                card={card}\n                key={`card-${index}-${card[1].value}`}\n              />\n            )\n          }\n        )}\n      </Hand>\n\n      {isCurrentTurn ? \n        !hasDrawnThisTurn ?\n          <div>\n            <h3>Pick one</h3>\n            <button onClick={() => drawFromPile('drawPile', userId)}>Draw from draw pile</button>\n            {!isTopOfDiscardSkip &&\n              <button onClick={() => drawFromPile('discardPile', userId)}>Draw from discard pile</button>\n            }\n          </div>\n        :\n          <div>\n            <h3>Pick one</h3>\n            {hasLaidPhaseThisRound ? \n              <button>Play on a laid phase</button>\n              :\n              <button>Lay down phase</button>\n            }\n            <button onClick={prepForDiscard}>Discard and end turn</button>\n          </div>\n        :\n        <></>\n      }\n    </div>\n  )\n}\n\nexport default Round;\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport { PreGame, Round } from './components/game-states/'\n// import { gameService } from './services'\nimport { firebase, game } from './services'\n\n\nfunction App() {\n  const database = firebase.database()\n  \n  const [ displayName, setDisplayName ] = useState('')\n  const [ isNewUser, setIsNewUser ] = useState(false)\n  const [ isLoading, setIsLoading ] = useState(true)\n  const [ gameState, setGameState ] = useState('')\n  const [ isHost, setIsHost ] = useState(false)\n  const [ userId, setUserId ] = useState(0)\n  const [ userList, setUserList ] = useState([])\n  const [ error, setError ] = useState('')\n  const [ currentHand, setCurrentHand ] = useState([])\n\n  useEffect(() => {\n    // determine user's authentication status\n    const localStorageUserId = localStorage.getItem('p10-user-id')\n    let id = localStorageUserId\n    \n    if (localStorageUserId) {\n      setUserId(localStorageUserId)\n      retrieveUserInfo(localStorageUserId)\n    } else {\n      firebase.auth().signInAnonymously()\n        .then(({ user }) => {\n          localStorage.setItem('p10-user-id', user.uid)\n        })\n        .catch((error) => {\n            // Handle Errors here.\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            console.log(errorMessage, errorCode)\n        })\n  \n      firebase.auth().onAuthStateChanged((user) => {\n        if (user) {\n          const { uid } = user\n          setUserId(uid)\n          id = uid\n        }\n      })\n      \n      retrieveUserInfo(userId)\n    }\n\n    // show list of users currently in the game\n    database.ref(`/game/userList`).on('value', (snapshot) => {\n      const userList = []\n      snapshot.forEach((childSnapshot) => {\n        userList.push(childSnapshot.val())\n      })\n      setUserList(userList)\n    });\n\n    // show list of users currently in the game\n    database.ref(`/game/userList`).on('child_changed', (snapshot) => {\n      const newValue = snapshot.val();\n      let userInUserList = userList.find(user => user.uid === newValue.uid);\n      userInUserList = newValue\n    });\n\n    // show list of users currently in the game\n    database.ref(`/game/state`).on('value', (snapshot) => {\n      setGameState(snapshot.val())\n    });\n\n    database.ref(`/game/userList/${id}/currentHand`).on('value', (snapshot) => {\n      setCurrentHand(Object.entries(snapshot.val() || {}))\n    })\n  }, [])\n\n  function retrieveUserInfo(uid) {\n    database.ref(`/game/userList/${uid}`).once('value', (snapshot) => {\n      const userInfo = snapshot.val()\n      if (userInfo) {\n        setDisplayName(userInfo.displayName)\n        setIsLoading(false)\n        updateUserList(uid, userInfo.displayName)\n        setCurrentHand(Object.entries(userInfo.currentHand || {}) || [])\n      } else {\n        setIsNewUser(true)\n        setIsLoading(false)\n      }\n    });\n    \n  }\n  \n  \n  function updateUserList(uid, displayName) {\n    database.ref(`/game/userList`).once('value', (snapshot) => {\n      const userList = []\n      snapshot.forEach((childSnapshot) => {\n        const childValue = childSnapshot.val()\n        userList.push(childValue)\n\n        // determine if player is host\n        if (childValue.host && uid === childValue.uid) {\n          setIsHost(true)\n        }\n      })\n\n      if (userList.length >= 6) {\n        setError('There are already 6 people in this game.<br>An update is coming soon to allow watching matches.')\n      }  else {\n        const existsInUserList = userList.findIndex((user) => user.uid === uid) !== -1\n        if (!existsInUserList) {\n          const isUserHost = !userList.length\n          database.ref(`/game/userList/`).child(uid).set({ \n            displayName, \n            uid, \n            host: isUserHost,\n            score: 0,\n            gameScore: 0,\n            currentPhase: 1,\n            hasLaidPhaseThisRound: false,\n          })\n        }\n      }\n    })\n  }\n\n  function onDisplayNameSubmit(e) {\n    e.preventDefault()\n    const nameInputValue = document.getElementById('display-name').value\n    database.ref(`/users/${userId}/displayName`).set(nameInputValue)\n    setDisplayName(nameInputValue)\n    updateUserList(userId, nameInputValue)\n    setIsNewUser(false)\n  }\n\n  function startGame() {\n    game.initializePhase10(userList).then(() => {\n      database.ref('game/state').set('round')\n    })\n  }\n\n  function removeUser(uid) {\n    database.ref(`game/userList/${uid}`).remove()\n    database.ref(`users/${uid}`).remove()\n  }\n\n  return (\n    <div className={`App ${userId}`}>\n      <style>\n        {`\n        li.${userId} {\n          font-weight: bold;\n          color: seagreen;\n        }\n\n        li.${userId}::after {\n          content: \" (you)\"\n        }\n\n        li.host::after {\n          content: \" (host)\"\n        }\n\n        li.${userId}.host::after {\n          content: \" (you, host)\"\n        }\n        `}\n      </style>\n      <header className=\"App-header\">\n        <h1>Phase 10</h1>\n      </header>\n      <main>\n        {isLoading ?\n          // TODO: make a loading spinner\n          <p>loading...</p>\n          :\n          gameState === 'pregame' || isNewUser ? // TODO: figure out better way to handle user entering game after it has started\n            <PreGame\n            error={error}\n            isNewUser={isNewUser}\n            onDisplayNameSubmit={onDisplayNameSubmit}\n            isHost={isHost}\n            userList={userList}\n            startGame={startGame}\n            removeUser={removeUser}\n            />\n            :\n            gameState === 'round' ?\n              <Round \n              currentHand={currentHand}\n              userList={userList}\n              userId={userId}\n              />\n              :\n              <p>Loading...</p>\n        } \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// This app requires a connection to firebase, so offline is not an option\nserviceWorker.unregister()\n"],"sourceRoot":""}
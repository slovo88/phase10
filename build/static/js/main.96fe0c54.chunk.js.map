{"version":3,"sources":["components/game-states/pregame/UserList.js","components/game-states/pregame/PreGame.js","components/game-states/round/Card.js","services/firebase/index.js","services/game/index.js","components/game-states/round/DiscardPile.js","components/game-states/round/Hand.js","components/game-states/round/DrawPile.js","components/shared/FullScreenModal.js","constants/phases.js","components/game-states/round/Round.js","App.js","serviceWorker.js","index.js"],"names":["UserList","userList","isHost","removeUser","map","user","index","className","uid","host","key","displayName","onClick","PreGame","error","isLoading","isNewUser","onDisplayNameSubmit","startGame","dangerouslySetInnerHTML","__html","htmlFor","id","type","placeholder","length","Card","card","color","value","corners","data-card-id","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","endRound","ref","set","_shuffleCards","cards","i","j","Math","floor","random","_drawCardsToHand","drawSource","cardsToDraw","drawnCards","splice","forEach","push","initializePhase10","once","then","snapshot","childSnapshot","child","remove","find","val","turnOrder","playersThisRound","roundSnapshot","currentRound","newDeck","drawDeck","colors","cardColor","number","_generateDeck","indexOfTopCardPostDeal","uidOfFirstPlayerThisRound","initializeRound","drawFromPile","pile","deck","discardFromHand","handSize","cardId","frontEndUserList","cardPath","discardedCard","discardPile","unshift","currentPlayer","isCurrentTurn","nextPlayer","endTurn","layDownPhase","laidCollections","countOfCardsLaid","reduce","acc","curr","rule","DiscardPile","setIsDiscardDrawDisabled","useState","topOfDiscard","setTopOfDiscard","useEffect","on","discardPileValue","topCard","off","Hand","currentHand","style","display","flexWrap","justifyContent","DrawPile","drawPileRemaining","setDrawPileRemaining","drawPile","drawPileCard","FullScreenModal","closeModal","children","position","top","bottom","left","right","backgroundColor","zIndex","overflowY","paddingBottom","height","padding","fontWeight","1","rules","text","2","3","4","5","6","7","8","9","10","game","Round","userId","setIsCurrentTurn","currentPhase","setCurrentPhase","hasDrawnThisTurn","setHasDrawnThisTurn","hasLaidPhaseThisRound","setHasLaidPhaseThisRound","isDiscardDrawDisabled","selected","setSelected","ruleIndex","setRuleIndex","showModal","toggleModal","modalContent","setModalContent","layHand","setLayHand","itemsToBeLaid","setitemsToBeLaid","discardInModal","handleDrawPileClick","toggleInSelection","selectionIndex","findIndex","selection","selectedCopy","validatePhase","phaseMap","ruleMinimum","console","log","ruleType","firstNonWildIndex","validatedPhase","possiblePlays","valueType","options","firstNumber","numberCheckStart","compareValue","lowestNumber","setValue","setColor","newLayHand","filter","handCard","selectedCard","LayingView","minHeight","DiscardView","openModal","modalStatus","snapshotValue","phaseText","App","setDisplayName","setIsNewUser","setIsLoading","gameState","setGameState","setIsHost","setUserId","setUserList","setError","setCurrentHand","retrieveUserInfo","userInfo","updateUserList","Object","entries","childValue","isUserHost","score","gameScore","localStorageUserId","localStorage","getItem","auth","signInAnonymously","setItem","catch","errorCode","code","errorMessage","message","onAuthStateChanged","newValue","e","preventDefault","nameInputValue","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96fe0c54.chunk.js","sourcesContent":["import React from 'react'\n\nfunction UserList({\n  userList,\n  isHost,\n  removeUser,\n}) {\n\n  return (\n    <ul>\n      {\n        userList.map((user, index) => (\n          <li \n            className={`${user.uid} ${user.host && 'host'}`} \n            key={`userList-${index}`}\n          >\n            <span>{user.displayName}</span>\n            {isHost && !user.host && \n              <button \n                key={`remove-${user.uid}`} \n                className=\"remove-user\" \n                onClick={() => removeUser(user.uid)}\n                key={`remove-${user.uid}`}\n              >\n                Remove user\n              </button>\n            }\n          </li>\n        ))\n      }\n    </ul>\n  )\n}\n\nexport default UserList","import React, { useState, useEffect } from 'react'\n// import { firebase, game } from '../../../services'\nimport { UserList } from './'\n\n\nfunction PreGame({\n  error,\n  isLoading,\n  isNewUser,\n  displayName,\n  onDisplayNameSubmit,\n  startGame,\n  userList,\n  isHost,\n  removeUser,\n}) {\n  return (\n    <>\n    <header className=\"App-header\">\n      <h1>Phase 10</h1>\n    </header>\n      {error && \n        <p dangerouslySetInnerHTML={{__html: error}} />\n      }\n      {isLoading ?\n        // TODO: make a loading spinner\n        <p>loading...</p>\n        :\n        !isNewUser ?\n          <p>{displayName}</p>\n        :\n        // TODO: componetize the different game states - // pre-game, round, round-end, game-end\n        isNewUser &&\n          <>\n            <h2>Welcome!</h2>\n            <p>Please enter a username to join the game</p>\n            <label htmlFor='display-name'>Name:</label>\n            <input \n              id='display-name' \n              type='text' \n              placeholder='Display Name'\n            />\n            <button onClick={onDisplayNameSubmit}>Submit</button>\n          </>\n      }\n      {isHost && !isNewUser && userList.length > 0 &&\n        <button onClick={startGame}>Everybody's In</button>\n      }\n      <UserList\n        userList={userList}\n        isHost={isHost}\n        removeUser={removeUser}\n      />\n    </>\n    \n  );\n}\n\nexport default PreGame;\n","import React from 'react'\n\nfunction Card({\n  card,\n  onClick,\n}) {\n  const { color, value, corners } = (card[1] || card)\n  \n  return (\n    <div \n      onClick={onClick ? () => onClick(card) : () => {}} \n      data-card-id={card[0]} \n      className={`card ${color}`}\n    >\n      <div className=\"card-value\">\n        {value}\n      </div>\n      <div className=\"card-top-left-value\">\n        {corners}\n      </div>\n      <div className=\"card-bottom-right-value\">\n        {corners}\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD7owlkcXvzdS8vHY2s3mt_Me-93ma2NZI\",\n  authDomain: \"phase10-pemo.firebaseapp.com\",\n  databaseURL: \"https://phase10-pemo.firebaseio.com\",\n  projectId: \"phase10-pemo\",\n  storageBucket: \"phase10-pemo.appspot.com\",\n  messagingSenderId: \"879568671948\",\n  appId: \"1:879568671948:web:fcf63e12d457b22afade69\",\n  measurementId: \"G-M6NSG0LYQ8\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase","import { firebase } from '../'\n\nconst database = firebase.database()\n\n// Pregame gamestate\n\n// initialize game\nfunction initializePhase10(userList) {\n  return database.ref('game/userList').once('value').then(function(snapshot) {\n    let index = 0;\n    snapshot.forEach((childSnapshot) => {\n      index++\n      childSnapshot.child('gameScore').ref.set(0)\n      childSnapshot.child('currentPhase').ref.set(1)\n      childSnapshot.child('hasLaidPhaseThisRound').ref.set(false)\n      childSnapshot.child('currentHand').ref.remove()\n      childSnapshot.child('turnOrder').ref.set(index)\n      childSnapshot.child('isCurrentTurn').ref.set(false)\n      childSnapshot.child('hasDrawnThisTurn').ref.set(false)\n      childSnapshot.child('scoreAddedThisRound').ref.set(0)\n\n      userList.find((user) => user.uid === childSnapshot.val().uid).turnOrder = index\n    })\n\n    database.ref('game/currentRound').set(0)\n    \n    initializeRound(userList)\n  })\n}\n\nfunction initializeRound(userList) {\n  const playersThisRound = userList.length\n\n  // advance round\n  database.ref('game/currentRound').once('value', (roundSnapshot) => {\n    let currentRound = roundSnapshot.val()\n    database.ref('game/currentRound').set(currentRound++)\n    \n    // create a new deck\n    const newDeck = _generateDeck()\n    \n    // move what the top card will be after dealing to discard pile\n    const indexOfTopCardPostDeal = playersThisRound * 10\n    database.ref('game/discardPile').set(newDeck.splice(indexOfTopCardPostDeal, 1))\n    \n    // deal cards to players\n    // HACK: more performant than looping and dealing 1 by 1, but also not traditonal deal ¯\\_(ツ)_/¯\n    userList.forEach((user) => {\n      _drawCardsToHand(newDeck, user.uid, 10)\n    })\n    \n    database.ref('game/drawPile').set(newDeck)\n    \n    // determine turn order\n    while (currentRound > playersThisRound) {\n      currentRound -= playersThisRound\n    }\n    \n    const uidOfFirstPlayerThisRound = userList.find((user) => user.turnOrder === currentRound).uid;\n    database.ref(`game/userList/${uidOfFirstPlayerThisRound}/isCurrentTurn`).set(true)\n  })\n}\n\n// Round gamestate\n\n// Turn\n// start turn -> draw -> play / lay -> discard\n\n// draw from draw or discard pile\nfunction drawFromPile(pile, uid) {\n  // get pile from fb\n  database.ref(`game/${pile}`).once('value', (snapshot) => {\n    let deck = snapshot.val()\n    // _drawCardsToHand to users hand\n    _drawCardsToHand(deck, uid)\n\n    // if draw pile is empty, shuffle discard pile\n    if (deck.length === 0 && pile === 'drawPile') {\n      database.ref('game/discardPile').once('value', (snapshot) => {\n        deck = _shuffleCards(snapshot.val())\n        database.ref(`game/discardPile`).set([])\n      })\n    } \n\n    // set pile in FB\n    database.ref(`game/${pile}`).set(deck)\n\n    // set hasDrawnThisTurn to true\n    database.ref(`game/userList/${uid}/hasDrawnThisTurn`).set(true)\n  })\n}\n\n// lay down phase\nfunction layDownPhase(uid, handSize, laidCollections) {\n  // check handSize for round end\n  const countOfCardsLaid = laidCollections.reduce(((acc, curr) => acc + curr.cards.length), 0)\n\n  // set laid value for user to true\n  database.ref(`game/userList/${uid}/hasLaidPhaseThisRound`).set(true)\n  \n  // remove cards from users hand\n  laidCollections.forEach((rule) => {\n    rule.cards.forEach((card) => {\n      database.ref(`game/userList/${uid}/currentHand/${card[0]}`).remove()\n    })\n  })\n  \n  // add to laidPhases, with userId as the key\n  database.ref(`game/laidPhases/${uid}`).set(laidCollections)\n\n  // if user lays down enough cards to go out, end the round\n  if (countOfCardsLaid === handSize) {\n    endRound()\n  }\n}\n\n// play from hand\nfunction hitOnLaidPhase(uid, handSize, cardId, laidId) {\n  // TODO: validations to happen in component? or here?\n  // add to laidId\n  // remove from hand\n  // check handSize for round end\n    // endRound\n}\n\n// discard from hand\nfunction discardFromHand(uid, handSize, cardId, frontEndUserList) {\n  // TODO: make skips work\n  const cardPath = `game/userList/${uid}/currentHand/${cardId}`\n  \n  database.ref(cardPath).once('value', (snapshot) => {\n    const discardedCard = snapshot.val()\n    \n    // add to discardPile\n    database.ref('game/discardPile').once('value', (snapshot) => {\n      const discardPile = snapshot.val() || []\n\n      discardPile.unshift(discardedCard)\n\n      database.ref('game/discardPile').set(discardPile)\n      \n    })\n  })\n\n  // remove from hand\n  database.ref(cardPath).remove()\n\n  // check handSize for round end\n  if (handSize <= 1) {\n    endRound()\n  } else {\n    // end turn\n    const currentPlayer = frontEndUserList.find((user) => user.isCurrentTurn)\n    const currentPlusOne = frontEndUserList.find((user) => user.turnOrder === currentPlayer.turnOrder + 1)\n    const nextPlayer = currentPlusOne || frontEndUserList.find((user) => user.turnOrder === 1)\n\n    endTurn(currentPlayer.uid, nextPlayer.uid)\n  }\n}\n\n// end turn\nfunction endTurn(currentPlayer, nextPlayer) {\n  // set isCurrentTurn false for current player\n  database.ref(`game/userList/${currentPlayer}/isCurrentTurn`).set(false)\n  // set hasDrawnThisTurn false for current player\n  database.ref(`game/userList/${nextPlayer}/hasDrawnThisTurn`).set(false)\n  \n  // set isCurrentTurn true for next player\n  database.ref(`game/userList/${nextPlayer}/isCurrentTurn`).set(true)\n}\n\n// end the round\nfunction endRound() {\n  database.ref('game/state').set('round-end')\n\n  // loop through players\n  // calculate score based on cards left in hand\n  // set to user\n  // add to total score\n  // TODO: stretch, let users see score breakdown/what cards were left in their hands\n  // reset laid down, iscurrentturn, and drawnThisTurn\n  // increase phase if laid down that round\n    // if someone completed phase 10, endGame\n}\n\n// Round-end gamestate\n\n// check for game end\nfunction checkForGameEnd() {\n  // if someone completed phase 10, endGame\n  // else init round\n}\n\n// Game-end gamestate\n// don't think there is any specific functions here, but can re-init game\n\n// Utility functions\n\n// deck generation\nfunction _generateDeck() {\n  const drawDeck = []\n\n  // create cards:\n  // Values 1-12, 2x each for all four colors\n  // Skips, 4x\n  // Wilds, 8x\n  const colors = ['red', 'yellow', 'green', 'blue']\n\n  for (let cardColor = 0; cardColor < colors.length; cardColor++) {\n    const color = colors[cardColor]\n\n    // creates four skip cards\n    drawDeck.push({ value: 'Skip', color: 'black', corners: 'S' })\n\n    for (let number = 1; number <= 12; number++) {\n      // creates 1-12 of each color, 2x\n      drawDeck.push({ value: number, color, corners: number })\n      drawDeck.push({ value: number, color, corners:number })\n\n      // creates two wilds per color\n      if (number === 1 || number === 2) {\n        drawDeck.push({ value: 'Wild', color: 'black', corners: 'W' })\n      }\n    }\n  }\n\n  return _shuffleCards(drawDeck)\n}\n\n// shuffle array of cards\nfunction _shuffleCards(cards) {\n  // Fisher-Yates shuffle - https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n  for (let i = cards.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [cards[i], cards[j]] = [cards[j], cards[i]];\n  }\n  return cards\n}\n\n// draw card to user's hand\nfunction _drawCardsToHand(drawSource, uid, cardsToDraw = 1) {\n  // TODO: check that enough cards are available to draw\n\n  // splice appropriate number of items from draw source array\n  const drawnCards = drawSource.splice(0, cardsToDraw)\n\n  // update user's hand\n  drawnCards.forEach((card) => {\n    database.ref(`game/userList/${uid}/currentHand`).push(card)\n  })\n}\n\nexport default { initializePhase10, drawFromPile, discardFromHand, layDownPhase }","import React, { useState, useEffect } from 'react'\nimport { firebase } from '../../../services'\nimport { Card } from '.'\n\n\nfunction DiscardPile({ setIsDiscardDrawDisabled, onClick }) {\n  const database = firebase.database()\n\n  const [ topOfDiscard, setTopOfDiscard ] = useState({ color: null, value: null })\n\n  useEffect(() => {\n    database.ref('game/discardPile').on('value', (snapshot) => {\n      const discardPileValue = snapshot.val()\n      const topCard = discardPileValue ? discardPileValue[0] : { color: 'black', value: 'X', corners: '' }\n  \n      setTopOfDiscard(topCard)\n      \n      if (topCard.value === 'S' || !discardPileValue) {\n        setIsDiscardDrawDisabled(true)\n      } else {\n        setIsDiscardDrawDisabled(false)\n      }\n    })\n\n    return function cleanup() {\n      database.ref('game/discardPile').off()\n    }\n  }, [])\n\n  return (\n    <Card \n      onClick={onClick}\n      card={topOfDiscard}\n    />\n  )\n}\n\nexport default DiscardPile","import React from 'react'\nimport { Card } from './'\n\nfunction Hand({ currentHand, onClick }) {\n  return (\n    <div style={{display: 'flex', flexWrap: \"wrap\", justifyContent: \"center\"}}>\n      {currentHand.map((card, index) => {\n        return (\n          <Card \n            card={card}\n            key={`card-${index}-${card[1].value}`}\n            onClick={onClick}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Hand","import React, { useEffect, useState} from 'react'\nimport { Card } from '.'\nimport { firebase } from '../../../services'\n\nfunction DrawPile({ onClick }) {\n  const database = firebase.database()\n\n  const [ drawPileRemaining, setDrawPileRemaining ] = useState(0)\n\n  useEffect(() => {\n    database.ref('game/drawPile').on('value', (snapshot) => {\n      const drawPile = snapshot.val() || []\n  \n      setDrawPileRemaining(drawPile.length)\n    })\n\n    return function cleanup() {\n      database.ref('game/drawPile').off()\n    }\n  }, [])\n\n  const drawPileCard = { color: 'black draw-pile', value: `Draw Pile (${drawPileRemaining})` }\n\n  return (\n    <Card\n      card={drawPileCard}\n      onClick={onClick}\n      className='draw-pile'\n    />\n  )\n}\n\nexport default DrawPile","import React from 'react'\n\nfunction FullScreenModal({ closeModal, children }) {\n    return (\n        <div style={{position: \"fixed\", top:0, bottom:0, left: 0, right: 0, backgroundColor: \"#282c34\",zIndex:10,overflowY:\"scroll\", paddingBottom:\"50px\"}}>\n            <div style={{height: \"20px\", top: 0,}}>\n                <div style={{position: \"absolute\", right:0, padding: \"10px\", fontWeight: \"bold\"}} onClick={closeModal}>X</div>\n            </div>\n            {children}\n        </div>\n    )\n}\n\nexport default FullScreenModal","// Phase 1 – 2 sets of 3\n// Phase 2 – 1 set of 3 and 1 run of 4\n// Phase 3 – 1 set of 4 and 1 run of 4\n// Phase 4 – 1 run of 7\n// Phase 5 – 1 run of 8\n// Phase 6 – 1 run of 9\n// Phase 7 – 2 sets of 4\n// Phase 8 – 7 cards of a color\n// Phase 9 – 1 set of 5 and 1 set of 2\n// Phase 10 – 1 set of 5 and 1 set of 3\n\nexport default {\n  1: {\n    rules: [\n      {\n        type: 'set',\n        number: 3,\n        text: 'first set of 3',\n      },\n      {\n        type: 'set',\n        number: 3,\n        text: 'second set of 3'\n      }\n    ],\n    text: [ '2 sets of 3' ]\n  },\n  2: {\n    rules: [\n      {\n        type: 'set',\n        number: 3,\n        text: 'set of 3',\n      },\n      {\n        type: 'run',\n        number: 4,\n        text: 'run of 4'\n      }\n    ],\n    text: [ '1 set of 3', '1 run of 4' ]\n  },\n  3: {\n    rules: [\n      {\n        type: 'set',\n        number: 4,\n        text: 'set of 4',\n      },\n      {\n        type: 'run',\n        number: 4,\n        text: 'run of 4'\n      }\n    ],\n    text: [ '1 set of 4', '1 run of 4' ]\n  },\n  4: {\n    rules: [\n      {\n        type: 'run',\n        number: 7,\n        text: 'run of 7',\n      },\n    ],\n    text: [ '1 run of 7' ]\n  },\n  5: {\n    rules: [\n      {\n        type: 'run',\n        number: 8,\n        text: 'run of 8',\n      },\n    ],\n    text: [ '1 run of 8' ]\n  },\n  6: {\n    rules: [\n      {\n        type: 'run',\n        number: 9,\n        text: 'run of 9',\n      }\n    ],\n    text: [ '1 run of 9' ]\n  },\n  7: {\n    rules: [\n      {\n        type: 'set',\n        number: 4,\n        text: 'first set of 4',\n      },\n      {\n        type: 'set',\n        number: 4,\n        text: 'second set of 4'\n      }\n    ],\n    text: [ '2 sets of 4' ]\n  },\n  8: {\n    rules: [\n      {\n        type: 'color',\n        number: 7,\n        text: '7 cards of one color',\n      },\n    ],\n    text: [ '7 cards of one color' ]\n  },\n  9: {\n    rules: [\n      {\n        type: 'set',\n        number: 5,\n        text: 'set of 5',\n      },\n      {\n        type: 'set',\n        number: 2,\n        text: 'set of 2'\n      }\n    ],\n    text: [ '1 set of 5', '1 set of 2' ]\n  },\n  10: {\n    rules: [\n      {\n        type: 'set',\n        number: 5,\n        text: 'set of 5',\n      },\n      {\n        type: 'set',\n        number: 3,\n        text: 'set of 3'\n      }\n    ],\n    text: [ '1 set of 5', '1 set of 3' ]\n  },\n}","import React, { useState, useEffect } from 'react'\nimport { DiscardPile, Hand, DrawPile } from './'\nimport { game, firebase } from '../../../services'\nimport { FullScreenModal } from '../../shared'\nimport phaseMap from '../../../constants/phases'\n\n//discardFromHand(uid, handSize, cardId, turnOrder)\nconst { drawFromPile, discardFromHand, layDownPhase } = game\nconst database = firebase.database()\n\nfunction Round({\n  currentHand,\n  userId,\n  userList,\n}) {\n\n  const [ isCurrentTurn, setIsCurrentTurn ] = useState(false)\n  const [ currentPhase, setCurrentPhase ] = useState(1)\n  const [ hasDrawnThisTurn, setHasDrawnThisTurn ] = useState(false)\n  const [ hasLaidPhaseThisRound, setHasLaidPhaseThisRound ] = useState(false)\n  const [ isDiscardDrawDisabled, setIsDiscardDrawDisabled ] = useState(false)\n  const [ selected, setSelected ] = useState([])\n  const [ ruleIndex, setRuleIndex ] = useState(0)\n  const [ showModal, toggleModal ] = useState(false)\n  const [ modalContent, setModalContent ] = useState('')\n  const [ layHand, setLayHand ] = useState([])\n  const [ itemsToBeLaid, setitemsToBeLaid ] = useState([])\n\n  // TODO: figure out how to get sorting hand to work - reorder in FB? click and drag? Click to sort?\n  // function sortByValue() {\n  //   var topUserPostsRef = firebase.database().ref('game/' + userId + '/currentHand').orderByChild('color');\n\n  //   topUserPostsRef.once('value', (snapshot) => console.log(snapshot.val))\n  // }\n\n  useEffect(() => {\n    setLayHand(currentHand)\n\n    database.ref(`/game/userList/${userId}/`).on('value', (snapshot) => {\n      const snapshotValue = snapshot.val()\n        setIsCurrentTurn(snapshotValue.isCurrentTurn || false)\n        setHasDrawnThisTurn(snapshotValue.hasDrawnThisTurn || false)\n        setHasLaidPhaseThisRound(snapshotValue.hasLaidPhaseThisRound || false)\n        setCurrentPhase(snapshotValue.currentPhase)\n      })\n      \n    return function cleanup() {\n      database.ref(`/game/userList/${userId}/isCurrentTurn`).off()\n    }\n  }, [])\n\n  function discardInModal(card) {\n    discardFromHand(userId, currentHand.length, card[0], userList)\n    closeModal()\n  }\n\n  function handleDrawPileClick(pile) {\n    if (!hasDrawnThisTurn) {\n      drawFromPile(pile, userId)\n    }\n  }\n\n  function toggleInSelection(card) {\n    // -1 if not already selected, index number otherwise\n    const selectionIndex = selected.findIndex((selection) => selection[0] === card[0])\n\n    const selectedCopy = selected.map((card) => card)\n\n    // check if card has already been selected\n    if (selectionIndex === -1) {\n      selectedCopy.push(card)\n    } else {\n      selectedCopy.splice(selectionIndex, 1)\n    }\n    \n    // rerender modal\n    setSelected(selectedCopy)\n  }\n\n  function validatePhase() {\n    const { rules } = phaseMap[currentPhase]\n    let error = ''\n    \n    // check for minimum number of cards for rule\n    const ruleMinimum = rules[ruleIndex].number\n    \n    if (selected.length < ruleMinimum) {\n      error = 'Not enough cards selected'\n      console.log(error)\n      return\n    }\n\n    // check if a Skip has been selected\n    const hasSkipSelected = selected.findIndex((card) => card[1].value === \"Skip\") !== -1\n    if (hasSkipSelected) {\n      error = 'Skips cannot be played in phases'\n      console.log(error)\n      return\n    }\n\n    const ruleType = rules[ruleIndex].type\n    const firstNonWildIndex = selected.findIndex((card) => card[1].value !== \"Wild\")\n\n    if (firstNonWildIndex === -1) {\n      // TODO: handle all wilds\n    }\n\n    const rule = rules[ruleIndex]\n\n    const validatedPhase = {\n      cards: selected,\n      rule,\n      possiblePlays: {\n        valueType: '',\n        options: []\n      }\n    }\n    \n    // run\n    if (ruleType === 'run') {\n      const firstNumber = selected[firstNonWildIndex][1].value\n      let numberCheckStart = firstNumber\n\n      // check if run is valid\n      for (let i = firstNonWildIndex; i < selected.length; i++) {\n        const compareValue = selected[i][1].value\n        if (numberCheckStart !== compareValue && compareValue !== 'Wild') {\n          error = 'These cards to do not make a run or may be out of order'\n          console.log(error)\n          return\n        }\n        numberCheckStart++\n      }\n\n      const lowestNumber = firstNumber - firstNonWildIndex\n      const highestNumber = numberCheckStart - 1\n\n      if (lowestNumber <= 0 || highestNumber >= 13) {\n        error = 'These cards to do not make a run or may be out of order'\n        return\n      }\n\n      validatedPhase.possiblePlays.valueType = 'value'\n      validatedPhase.possiblePlays.options.push(lowestNumber - 1)\n      validatedPhase.possiblePlays.options.push(numberCheckStart)\n    } \n    \n    // set\n    if (ruleType === 'set') {\n      let setValue = selected[firstNonWildIndex][1].value\n\n      // check if run is valid\n      for (let i = firstNonWildIndex; i < selected.length; i++) {\n        const compareValue = selected[i][1].value\n        if (setValue !== compareValue && compareValue !== 'Wild') {\n          error = 'These cards to do not make a run or may be out of order'\n          return\n        }\n      }\n\n      validatedPhase.possiblePlays.valueType = 'value'\n      validatedPhase.possiblePlays.options.push(setValue)\n    }\n    \n    // color\n    if (ruleType === 'color') {\n      let setColor = selected[firstNonWildIndex][1].color\n\n      // check if run is valid\n      for (let i = firstNonWildIndex; i < selected.length; i++) {\n        const { color, value } = selected[i][1]\n        if (setColor !== color && value !== 'Wild') {\n          error = 'These cards to do not make a run or may be out of order'\n          return\n        }\n      }\n\n      validatedPhase.possiblePlays.valueType = 'color'\n      validatedPhase.possiblePlays.options.push(setColor)\n    }\n\n    itemsToBeLaid.push(validatedPhase)\n    \n    if (rules[ruleIndex + 1]) {\n      setRuleIndex(ruleIndex + 1)\n      \n      // filter selected out of lay hand\n      const newLayHand = layHand.filter((handCard) => selected.findIndex((selectedCard) => selectedCard[0] === handCard[0]) === -1)\n\n      setLayHand(newLayHand)\n      // reset selected\n      setSelected([])\n    } else {\n      layDownPhase(userId, currentHand.length, itemsToBeLaid)\n      closeModal()\n    }\n  }\n\n  function LayingView() {\n    const { rules } = phaseMap[currentPhase]\n\n    return (\n      <div>\n        <h1>Select {rules[ruleIndex].text}</h1>\n        {rules[ruleIndex].type === 'run' &&\n          <p>Please choose cards in order</p>\n        }\n        <Hand\n          currentHand={layHand}\n          onClick={toggleInSelection}\n        />\n\n        <p>Selected:</p>\n        <div style={{minHeight:\"84px\"}}>\n          <Hand\n            currentHand={selected}\n            onClick={toggleInSelection}\n          />\n        </div>\n\n        <button onClick={validatePhase}>\n          {ruleIndex === rules.length -1 ?\n            \"Lay down phase\"\n            :\n            \"Next\"\n          }\n        </button>\n      </div>\n    )\n  }\n\n  function DiscardView() {\n    return (\n      <div>\n        <h1>Select card to discard</h1>\n        <Hand\n          currentHand={currentHand}\n          onClick={discardInModal}\n        />\n      </div>\n    )\n  }\n\n  function openModal(modalStatus) {\n    setRuleIndex(0)\n    setSelected([])\n    setitemsToBeLaid([])\n    setModalContent(modalStatus)\n    setLayHand(currentHand)\n    toggleModal(true)\n  }\n\n  function closeModal() {\n    toggleModal(false)\n  }\n\n  return (\n    <div>\n      {showModal && \n        <FullScreenModal\n          closeModal={closeModal}\n        >\n          {modalContent === 'laying' ?\n            <LayingView />\n            :\n            modalContent === 'discarding' &&\n              <DiscardView />\n          }\n        </FullScreenModal>\n      }\n\n      {/* TODO: Show other player's name, phase, laid down cards, and hand size */}\n      {/* <OtherPlayers /> */}\n\n      <div className=\"round-middle\">\n        <div className={`card-piles-wrapper ${!hasDrawnThisTurn && 'highlight'}`}>\n          <div className=\"card-piles\">\n            <DrawPile\n              onClick={() => handleDrawPileClick('drawPile')}\n            />\n            <DiscardPile\n              onClick={isDiscardDrawDisabled ? () => {} : () => handleDrawPileClick('discardPile')}\n              setIsDiscardDrawDisabled={setIsDiscardDrawDisabled}\n            />\n          </div>\n        </div>\n        <div className=\"players-phase\">\n          <p>Your phase:</p>  \n          {!hasLaidPhaseThisRound ?\n            phaseMap[currentPhase].text.map((phaseText) => {\n              return <p key={`${userId}-${phaseText}`} className=\"phase-text\">{phaseText}</p>\n            })\n            :\n            <p>placeholder for successful laydown</p>\n          }\n          \n        </div>\n      </div>\n      \n      <p className=\"your-hand\">Your hand:</p>\n      <Hand\n        currentHand={currentHand}\n      />\n\n      {isCurrentTurn && hasDrawnThisTurn ? \n          <div>\n            {hasLaidPhaseThisRound ? \n              <button>Hit on laid phase</button>\n              :\n              <button onClick={() => openModal('laying')}>Lay down phase</button>\n            }\n            <button onClick={() => openModal('discarding')}>Discard and end turn</button>\n          </div>\n        :\n        <></>\n      }\n    </div>\n  )\n}\n\nexport default Round;\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport { PreGame, Round } from './components/game-states/'\n// import { gameService } from './services'\nimport { firebase, game } from './services'\n\n\nfunction App() {\n  const database = firebase.database()\n  \n  const [ displayName, setDisplayName ] = useState('')\n  const [ isNewUser, setIsNewUser ] = useState(false)\n  const [ isLoading, setIsLoading ] = useState(true)\n  const [ gameState, setGameState ] = useState('')\n  const [ isHost, setIsHost ] = useState(false)\n  const [ userId, setUserId ] = useState(0)\n  const [ userList, setUserList ] = useState([])\n  const [ error, setError ] = useState('')\n  const [ currentHand, setCurrentHand ] = useState([])\n\n  useEffect(() => {\n    // determine user's authentication status\n    const localStorageUserId = localStorage.getItem('p10-user-id')\n    let id = localStorageUserId\n    \n    if (localStorageUserId) {\n      setUserId(localStorageUserId)\n      retrieveUserInfo(localStorageUserId)\n    } else {\n      firebase.auth().signInAnonymously()\n        .then(({ user }) => {\n          localStorage.setItem('p10-user-id', user.uid)\n        })\n        .catch((error) => {\n            // Handle Errors here.\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            console.log(errorMessage, errorCode)\n        })\n  \n      firebase.auth().onAuthStateChanged((user) => {\n        if (user) {\n          const { uid } = user\n          setUserId(uid)\n          id = uid\n        }\n      })\n      \n      retrieveUserInfo(userId)\n    }\n\n    // show list of users currently in the game\n    database.ref(`/game/userList`).on('value', (snapshot) => {\n      const userList = []\n      snapshot.forEach((childSnapshot) => {\n        userList.push(childSnapshot.val())\n      })\n      setUserList(userList)\n    });\n\n    // show list of users currently in the game\n    database.ref(`/game/userList`).on('child_changed', (snapshot) => {\n      const newValue = snapshot.val();\n      let userInUserList = userList.find(user => user.uid === newValue.uid);\n      userInUserList = newValue\n    });\n\n    // show list of users currently in the game\n    database.ref(`/game/state`).on('value', (snapshot) => {\n      setGameState(snapshot.val())\n    });\n\n    database.ref(`/game/userList/${id}/currentHand`).on('value', (snapshot) => {\n      setCurrentHand(Object.entries(snapshot.val() || {}))\n    })\n\n    return function cleanup() {\n      database.ref(`/game/userList/${id}/currentHand`).off()\n      database.ref(`/game/state`).off()\n      database.ref(`/game/userList`).off()\n    }\n  }, [])\n\n  function retrieveUserInfo(uid) {\n    database.ref(`/game/userList/${uid}`).once('value', (snapshot) => {\n      const userInfo = snapshot.val()\n      if (userInfo) {\n        setDisplayName(userInfo.displayName)\n        setIsLoading(false)\n        updateUserList(uid, userInfo.displayName)\n        setCurrentHand(Object.entries(userInfo.currentHand || {}) || [])\n      } else {\n        setIsNewUser(true)\n        setIsLoading(false)\n      }\n    });\n    \n  }\n  \n  \n  function updateUserList(uid, displayName) {    \n    database.ref(`/game/userList`).once('value', (snapshot) => {      \n      const userList = []\n      snapshot.forEach((childSnapshot) => {\n        const childValue = childSnapshot.val()\n        userList.push(childValue)      \n        // determine if player is host\n        if (childValue.host && uid === childValue.uid) {\n          setIsHost(true)\n        }\n      })\n\n      if (userList.length >= 6) {\n        setError('There are already 6 people in this game.<br>An update is coming soon to allow watching matches.')\n      }  else {\n        const existsInUserList = userList.findIndex((user) => user.uid === uid) !== -1\n        if (!existsInUserList) {\n          const isUserHost = !userList.length\n          setIsHost(isUserHost)\n          database.ref(`/game/userList/`).child(uid).set({ \n            displayName, \n            uid, \n            host: isUserHost,\n            score: 0,\n            gameScore: 0,\n            currentPhase: 1,\n            hasLaidPhaseThisRound: false,\n          })\n        }\n      }\n    })\n  }\n\n  function onDisplayNameSubmit(e) {\n    e.preventDefault()\n    const nameInputValue = document.getElementById('display-name').value\n    database.ref(`/users/${userId}/displayName`).set(nameInputValue)\n    setDisplayName(nameInputValue)    \n    updateUserList(userId, nameInputValue)\n    setIsNewUser(false)\n  }\n\n  function startGame() {\n    game.initializePhase10(userList).then(() => {\n      database.ref('game/state').set('round')\n    })\n  }\n\n  function removeUser(uid) {\n    database.ref(`game/userList/${uid}`).remove()\n    database.ref(`users/${uid}`).remove()\n  }\n\n  return (\n    <div className={`App ${userId}`}>\n      <style>\n        {`\n        li.${userId} {\n          font-weight: bold;\n          color: seagreen;\n        }\n\n        li.${userId}::after {\n          content: \" (you)\"\n        }\n\n        li.host::after {\n          content: \" (host)\"\n        }\n\n        li.${userId}.host::after {\n          content: \" (you, host)\"\n        }\n        `}\n      </style>\n      <main>\n        {isLoading ?\n          // TODO: make a loading spinner\n          <p>loading...</p>\n          :\n          gameState === 'pregame' || isNewUser ? // TODO: figure out better way to handle user entering game after it has started\n            <PreGame\n            error={error}\n            isNewUser={isNewUser}\n            onDisplayNameSubmit={onDisplayNameSubmit}\n            isHost={isHost}\n            userList={userList}\n            startGame={startGame}\n            removeUser={removeUser}\n            />\n            :\n            gameState === 'round' ?\n              <Round \n              currentHand={currentHand}\n              userList={userList}\n              userId={userId}\n              />\n              :\n              <p>Loading...</p>\n        } \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// This app requires a connection to firebase, so offline is not an option\nserviceWorker.unregister()\n"],"sourceRoot":""}